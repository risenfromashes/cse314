diff --git a/Makefile b/Makefile
index 39a99d7..f7e4157 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_thread\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..1611ff3 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -85,7 +85,9 @@ void            printfinit(void);
 int             cpuid(void);
 void            exit(int);
 int             fork(void);
-int             growproc(int);
+int             clone(uint64 fcn, uint64 arg, uint64 stack);
+int             join(int);
+int             growproc(int, uint64*);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
 void            proc_freepagetable(pagetable_t, uint64);
@@ -95,6 +97,7 @@ void            setkilled(struct proc*);
 struct cpu*     mycpu(void);
 struct cpu*     getmycpu(void);
 struct proc*    myproc();
+void            smeminit(void);
 void            procinit(void);
 void            scheduler(void) __attribute__((noreturn));
 void            sched(void);
@@ -164,7 +167,9 @@ pagetable_t     uvmcreate(void);
 void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
+uint64          uvmdemirror(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64, uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..2b3ec8f 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -20,6 +20,7 @@ main()
     kvminit();       // create kernel page table
     kvminithart();   // turn on paging
     procinit();      // process table
+    smeminit();      // sharedmem table
     trapinit();      // trap vectors
     trapinithart();  // install kernel trap vector
     plicinit();      // set up interrupt controller
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..bf4b025 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -10,6 +10,8 @@ struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
 
+struct smem smem[NPROC];
+
 struct proc *initproc;
 
 int nextpid = 1;
@@ -17,15 +19,42 @@ struct spinlock pid_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
+static void freesmem(struct smem *s);
 
 extern char trampoline[]; // trampoline.S
 
-// helps ensure that wakeups of wait()ing
+// helps ensure that wakeups of wait()ing and join()ing
 // parents are not lost. helps obey the
 // memory model when using p->parent.
 // must be acquired before any p->lock.
 struct spinlock wait_lock;
 
+
+// lock must be held
+static void 
+smem_up(struct smem *smem) 
+{
+  if (smem->state == UNUSED) {
+    panic("Referencing UNUSED smem");
+  }
+  smem->ref_count++;
+}
+
+// smem->lock and proc->lock must be held
+static void 
+smem_down(struct smem *smem, struct proc* p) 
+{
+  smem->ref_count--;
+  if(smem->ref_count == 0) {
+    proc_freepagetable(p->pagetable, p->sz);
+    freesmem(smem);
+  } else {
+    // delete page table but not physical addresses
+    uvmdemirror(p->pagetable, p->sz, 0);
+    proc_freepagetable(p->pagetable, 0);
+  }
+}
+
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
@@ -58,6 +87,20 @@ procinit(void)
   }
 }
 
+
+// initialize the smem table.
+void
+smeminit(void)
+{
+  struct smem *s;
+
+  for(s = smem; s < &smem[NPROC]; s++) {
+      initlock(&s->lock, "smem");
+      s->ref_count = 0;
+      s->state = UNUSED;
+  }
+}
+
 // Must be called with interrupts disabled,
 // to prevent race with process being moved
 // to a different CPU.
@@ -102,12 +145,32 @@ allocpid()
   return pid;
 }
 
+
+// Look in the smem table for an UNUSED smem
+// return with smem->lock held
+static struct smem* 
+allocsmem(void) 
+{
+  struct smem *s;
+  // look for free smem struct
+  for(s = smem; s < &smem[NPROC]; s++) {
+    acquire(&s->lock);
+    if(s->state == UNUSED) {
+      s->state = USED;
+      return s;
+    } else {
+      release(&s->lock);
+    }
+  }
+  return 0;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
-// and return with p->lock held.
+// and return with p->lock and p->smem->lock held.
 // If there are no free procs, or a memory allocation fails, return 0.
 static struct proc*
-allocproc(void)
+allocproc(int is_thread)
 {
   struct proc *p;
 
@@ -122,12 +185,25 @@ allocproc(void)
   return 0;
 
 found:
+  p->is_thread = is_thread;
+
+  if(!p->is_thread) {
+    if ((p->smem = allocsmem()) == 0) {
+      release(&p->lock);
+      return 0;    
+    }
+    smem_up(p->smem);
+    release(&p->smem->lock);
+  }
+
   p->pid = allocpid();
   p->state = USED;
 
+
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
+    release(&p->smem->lock);
     release(&p->lock);
     return 0;
   }
@@ -136,10 +212,14 @@ found:
   p->pagetable = proc_pagetable(p);
   if(p->pagetable == 0){
     freeproc(p);
+    release(&p->smem->lock);
     release(&p->lock);
     return 0;
   }
 
+  if (!p->is_thread) {
+    p->mem_id = p->pid;    
+  }
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
@@ -149,17 +229,21 @@ found:
   return p;
 }
 
+
+
 // free a proc structure and the data hanging from it,
 // including user pages.
-// p->lock must be held.
+// p->lock, p->smem->lock must be held.
 static void
 freeproc(struct proc *p)
 {
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  if(p->pagetable) {
+    // decrease ref count of base pagetable
+    smem_down(p->smem, p);
+  }
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -171,6 +255,16 @@ freeproc(struct proc *p)
   p->state = UNUSED;
 }
 
+
+// free a smem structure
+// s->lock must be held.
+static void
+freesmem(struct smem *s)
+{
+  s->ref_count = 0;
+  s->state = UNUSED;
+}
+
 // Create a user page table for a given process, with no user memory,
 // but with trampoline and trapframe pages.
 pagetable_t
@@ -234,7 +328,7 @@ userinit(void)
 {
   struct proc *p;
 
-  p = allocproc();
+  p = allocproc(0);
   initproc = p;
   
   // allocate one user page and copy initcode's instructions
@@ -256,24 +350,86 @@ userinit(void)
 
 // Grow or shrink user memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
-{
-  uint64 sz;
-  struct proc *p = myproc();
+// returns old size by oldsz pointer
+int 
+growproc(int n, uint64* oldsz) {
+  uint64 sz, new_sz;
+  int mem_id, pid;
+
+  struct proc *mp = myproc();
+
+  acquire(&mp->smem->lock);
+  sz = mp->sz;
+  new_sz = mp->sz + n;
+
+  mem_id = mp->mem_id;
+  pid = mp->pid;
+
 
-  sz = p->sz;
-  if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+  if (new_sz > sz) {
+    // allocate for self
+    if ((mp->sz = uvmalloc(mp->pagetable, sz, new_sz, PTE_W)) == 0) {
+      mp->sz = sz;
+      release(&mp->smem->lock);
       return -1;
     }
-  } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
+
+    // mirror for rest
+    for(struct proc* p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if (p->mem_id == mem_id && p->pid != pid && p->killed == 0) {
+        if (p->sz != sz) {
+          panic("Pagetables not synchronized");
+        }
+
+        if ((p->sz = uvmmirror(mp->pagetable, p->pagetable, sz, new_sz)) == 0) {
+          // reset to original size
+          p->sz = sz;
+          release(&p->lock);
+          goto bad;
+        }
+      }
+      release(&p->lock);
+    }
+  } else if (new_sz < sz) {
+    // deallocate for self
+    mp->sz = uvmdealloc(mp->pagetable, sz, new_sz);
+    // deallocate for others
+    for(struct proc* p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if (p->mem_id == mem_id && p->pid != pid && p->killed == 0) {
+        if (p->sz != sz) {
+          panic("Pagetables not synchronized");
+        }
+        p->sz = uvmdemirror(p->pagetable, sz, new_sz);
+      }
+      release(&p->lock);
+    }
   }
-  p->sz = sz;
+
+  release(&mp->smem->lock);
+  *oldsz = sz;
   return 0;
+bad:
+  // deallocate for self
+  mp->sz = uvmdealloc(mp->pagetable, mp->sz, sz);
+  // deallocate for others
+  for(struct proc* p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if (p->mem_id == mem_id && p->pid != pid && p->killed == 0) {
+      if (p->sz != sz) {
+        p->sz = uvmdemirror(p->pagetable, p->sz, sz);
+      }
+    }
+    release(&p->lock);
+  }
+
+  release(&mp->smem->lock);
+  return -1;
 }
 
+
+
 // Create a new process, copying the parent.
 // Sets up child kernel stack to return as if from fork() system call.
 int
@@ -284,7 +440,7 @@ fork(void)
   struct proc *p = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if((np = allocproc(0)) == 0){
     return -1;
   }
 
@@ -294,6 +450,7 @@ fork(void)
     release(&np->lock);
     return -1;
   }
+
   np->sz = p->sz;
 
   // copy saved user registers.
@@ -315,7 +472,100 @@ fork(void)
   release(&np->lock);
 
   acquire(&wait_lock);
-  np->parent = p;
+  np->parent = p->is_thread ? p->parent : p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+
+// Create a new process, copying the parent.
+// Sets up child kernel stack to return as if from fork() system call.
+int 
+clone(uint64 fcn, uint64 arg, uint64 stack) {
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+  struct proc *ap = p;
+  uint64 sp = stack + PGSIZE;
+
+  // both checks are required
+  // if a process is killed, ap->killed will be set first
+  // however after it's in zombie state and the threads are reparented
+  // ap points to the init process
+  // but by then p->killed will be set
+
+  if (p->killed) {
+    // already kill and/or reparented
+    return -1;
+  }
+
+  if (p->is_thread) {
+    // actual main process
+    acquire(&wait_lock);
+    ap = p->parent;
+    release(&wait_lock);
+
+    // parent killed but haven't exitted yet
+    if (ap->killed) {
+      return -1;
+    }
+  }
+
+
+    // Allocate process.
+  if ((np = allocproc(1)) == 0) {
+    return -1;
+  }
+
+  // mirror parent page table
+  if (uvmmirror(p->pagetable, np->pagetable, 0, p->sz) < 0) {
+    freeproc(np);
+    release(&np->smem->lock);
+    release(&np->lock);
+    return -1;
+  }
+
+  np->mem_id = p->mem_id;
+
+  if (np->is_thread) {
+    acquire(&p->smem->lock);
+    np->smem = p->smem;
+    np->sz = p->sz;
+    smem_up(np->smem);
+    release(&p->smem->lock);
+  }
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // align by 16 bytes
+  sp -= (sp % 16);
+
+  // prepare trapframe
+  np->trapframe->ra = 0xFFFFFFFF; // fake return
+  np->trapframe->epc = fcn;
+  np->trapframe->a0 = arg;
+  np->trapframe->sp = sp;
+
+  // increment reference counts on open file descriptors.
+  for (i = 0; i < NOFILE; i++)
+    if (p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p->is_thread ? p->parent : p;
   release(&wait_lock);
 
   acquire(&np->lock);
@@ -365,26 +615,45 @@ exit(int status)
   end_op();
   p->cwd = 0;
 
-  acquire(&wait_lock);
+  if (!p->is_thread) {
+    // kill all child threads
+    for(struct proc* pp = proc; pp < &proc[NPROC]; pp++) {
+      acquire(&pp->lock);
+      if (pp->mem_id == p->pid) {
+        pp->killed = 1;
+        if(pp->state == SLEEPING) {
+          pp->state = RUNNABLE;
+        }
+      }
+      release(&pp->lock);
+    }
+
+    acquire(&wait_lock);
 
-  // Give any children to init.
-  reparent(p);
+    // Give any children to init.
+    reparent(p);
 
-  // Parent might be sleeping in wait().
-  wakeup(p->parent);
+    // Parent might be sleeping in wait().
+    wakeup(p->parent);
   
-  acquire(&p->lock);
+    acquire(&p->lock);
 
-  p->xstate = status;
-  p->state = ZOMBIE;
+    p->xstate = status;
+    p->state = ZOMBIE;
 
-  release(&wait_lock);
+    release(&wait_lock);
+  } else {
+    acquire(&p->lock);
+    p->state = ZOMBIE;
+    wakeup(p);
+  }
 
   // Jump into the scheduler, never to return.
   sched();
   panic("zombie exit");
 }
 
+
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
 int
@@ -407,17 +676,29 @@ wait(uint64 addr)
         havekids = 1;
         if(pp->state == ZOMBIE){
           // Found one.
-          pid = pp->pid;
-          if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
-                                  sizeof(pp->xstate)) < 0) {
+          if (!pp->is_thread) {
+            // process
+            pid = pp->pid;
+            if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+                                    sizeof(pp->xstate)) < 0) {
+              release(&pp->lock);
+              release(&wait_lock);
+              return -1;
+            }
+            acquire(&pp->smem->lock);
+            freeproc(pp);
+            // release locks
+            release(&pp->smem->lock);
             release(&pp->lock);
             release(&wait_lock);
-            return -1;
+            return pid;
+          } else {
+            // free proc
+            acquire(&pp->smem->lock);
+            freeproc(pp);
+            release(&pp->smem->lock);
+            // continue, don't wakeup if child thread exists
           }
-          freeproc(pp);
-          release(&pp->lock);
-          release(&wait_lock);
-          return pid;
         }
         release(&pp->lock);
       }
@@ -428,12 +709,70 @@ wait(uint64 addr)
       release(&wait_lock);
       return -1;
     }
-    
     // Wait for a child to exit.
     sleep(p, &wait_lock);  //DOC: wait-sleep
   }
 }
 
+
+// Join thread with another thread
+// Thread must be created before joined
+// Return -1 if this process has no children.
+int
+join(int tid)
+{
+  struct proc *pp;
+  int mem_id;
+  struct proc *p = myproc();
+
+
+  mem_id = p->mem_id;
+  if (p->pid == tid) {
+    // cannot join with self
+    return -1;
+  }
+  if (p->mem_id == tid) {
+    // cannot join main thread with other thread
+    return -1;
+  }
+
+  // find process with matching pid
+  int found = 0;
+  printf("trying to join\n");
+  for(pp = proc; pp < &proc[NPROC]; pp++) {
+    acquire(&pp->lock);
+    for(;;) {
+      if (pp->mem_id == mem_id && pp->pid == tid && pp->killed == 0) {
+        // make sure the child isn't still in exit() or swtch().
+        found = 1;
+        if(killed(p)) {
+          release(&pp->lock);
+          return -1;
+        }
+
+        if (pp->state == ZOMBIE) {
+          // Found one.
+          freeproc(pp);
+          release(&pp->lock);
+          return tid;
+        }
+
+        sleep(pp, &pp->lock);
+      } else if (found) {
+        // now invalidated
+        release(&pp->lock);
+        return tid;
+      } else {
+        break;
+      }
+    }
+    release(&pp->lock);
+  }
+
+  // no thread with given tid created yet
+  return -1;
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -603,6 +942,7 @@ kill(int pid)
   return -1;
 }
 
+
 void
 setkilled(struct proc *p)
 {
@@ -659,12 +999,12 @@ void
 procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [USED]      "used",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
+  [UNUSED]    = "unused",
+  [USED]      = "used",
+  [SLEEPING]  = "sleep ",
+  [RUNNABLE]  = "runble",
+  [RUNNING]   = "run   ",
+  [ZOMBIE]    = "zombie"
   };
   struct proc *p;
   char *state;
@@ -680,4 +1020,4 @@ procdump(void)
     printf("%d %s %s", p->pid, state, p->name);
     printf("\n");
   }
-}
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..c5778a0 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -20,10 +20,10 @@ struct context {
 
 // Per-CPU state.
 struct cpu {
-  struct proc *proc;          // The process running on this cpu, or null.
-  struct context context;     // swtch() here to enter scheduler().
-  int noff;                   // Depth of push_off() nesting.
-  int intena;                 // Were interrupts enabled before push_off()?
+  struct proc *proc;      // The process running on this cpu, or null.
+  struct context context; // swtch() here to enter scheduler().
+  int noff;               // Depth of push_off() nesting.
+  int intena;             // Were interrupts enabled before push_off()?
 };
 
 extern struct cpu cpus[NCPU];
@@ -81,27 +81,40 @@ struct trapframe {
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+// structure to bookkeep memory shared by threads
+struct smem {
+  struct spinlock lock;
+  // lock must be held
+  int ref_count;
+  // either USED or UNUSED
+  enum procstate state;
+};
+
 // Per-process state
 struct proc {
   struct spinlock lock;
 
   // p->lock must be held when using these:
-  enum procstate state;        // Process state
-  void *chan;                  // If non-zero, sleeping on chan
-  int killed;                  // If non-zero, have been killed
-  int xstate;                  // Exit status to be returned to parent's wait
-  int pid;                     // Process ID
+  enum procstate state; // Process state
+  void *chan;           // If non-zero, sleeping on chan
+  int killed;           // If non-zero, have been killed
+  int xstate;           // Exit status to be returned to parent's wait
+  int pid;              // Process ID
+  int is_thread;        // If non-zero, this is a thread
+  int mem_id;           // Thread's parent ID
 
-  // wait_lock must be held when using this:
-  struct proc *parent;         // Parent process
+  // wait_lock must be held when using these:
+  struct proc *parent; // Parent process
 
   // these are private to the process, so p->lock need not be held.
   uint64 kstack;               // Virtual address of kernel stack
-  uint64 sz;                   // Size of process memory (bytes)
   pagetable_t pagetable;       // User page table
   struct trapframe *trapframe; // data page for trampoline.S
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  struct smem *smem;      // Shared memory bookkeeping
+  uint64 sz;                   // Size of process memory (bytes)
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6a4cb7f 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,31 +101,37 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_thread_join(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+  [SYS_fork]            = sys_fork,
+  [SYS_exit]            = sys_exit,
+  [SYS_wait]            = sys_wait,
+  [SYS_pipe]            = sys_pipe,
+  [SYS_read]            = sys_read,
+  [SYS_kill]            = sys_kill,
+  [SYS_exec]            = sys_exec,
+  [SYS_fstat]           = sys_fstat,
+  [SYS_chdir]           = sys_chdir,
+  [SYS_dup]             = sys_dup,
+  [SYS_getpid]          = sys_getpid,
+  [SYS_sbrk]            = sys_sbrk,
+  [SYS_sleep]           = sys_sleep,
+  [SYS_uptime]          = sys_uptime,
+  [SYS_open]            = sys_open,
+  [SYS_write]           = sys_write,
+  [SYS_mknod]           = sys_mknod,
+  [SYS_unlink]          = sys_unlink,
+  [SYS_link]            = sys_link,
+  [SYS_mkdir]           = sys_mkdir,
+  [SYS_close]           = sys_close,
+  [SYS_thread_create]   = sys_thread_create,
+  [SYS_thread_exit]     = sys_thread_exit,
+  [SYS_thread_join]     = sys_thread_join,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..ec3c79e 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,25 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork          1
+#define SYS_exit          2
+#define SYS_wait          3
+#define SYS_pipe          4
+#define SYS_read          5
+#define SYS_kill          6
+#define SYS_exec          7
+#define SYS_fstat         8
+#define SYS_chdir         9
+#define SYS_dup           10
+#define SYS_getpid        11
+#define SYS_sbrk          12
+#define SYS_sleep         13
+#define SYS_uptime        14
+#define SYS_open          15
+#define SYS_write         16
+#define SYS_mknod         17
+#define SYS_unlink        18
+#define SYS_link          19
+#define SYS_mkdir         20
+#define SYS_close         21
+#define SYS_thread_create 22
+#define SYS_thread_exit   23
+#define SYS_thread_join   24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..516333a 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -42,8 +42,7 @@ sys_sbrk(void)
   int n;
 
   argint(0, &n);
-  addr = myproc()->sz;
-  if(growproc(n) < 0)
+  if(growproc(n, &addr) < 0)
     return -1;
   return addr;
 }
@@ -89,3 +88,29 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64 
+sys_thread_create(void)
+{
+  uint64 fcn, arg, stack;
+  argaddr(0, &fcn);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+  return clone(fcn, arg, stack);
+}
+
+uint64 
+sys_thread_exit(void)
+{
+  exit(0);
+  return 0;
+}
+
+uint64 
+sys_thread_join(void)
+{
+  int tid;
+  argint(0, &tid);
+  return join(tid);
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..e68e01c 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -266,6 +266,21 @@ uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
   return newsz;
 }
 
+// only unmap pagetables for threads
+uint64
+uvmdemirror(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+{
+  if(newsz >= oldsz)
+    return oldsz;
+
+  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 0);
+  }
+
+  return newsz;
+}
+
 // Recursively free page-table pages.
 // All leaf mappings must already have been removed.
 void
@@ -332,6 +347,39 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+// Given a parent process's page table, 
+// map it's memory into a child thread
+// its memory into a child's page table.
+// Copies both the page table but not physical memory
+// returns 0 on success, -1 on failure.
+// frees any allocated pages on failure.
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 start, uint64 end)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  start = PGROUNDUP(start);
+
+  for(i = start; i < end; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmmirror: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmmirror: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 0);
+  return -1;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/user.h b/user/user.h
index 4d398d5..3789ceb 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void (*fcn)(void*), void*, void*);
+int thread_join(int);
+void thread_exit(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..49e26d2 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_exit");
+entry("thread_join");
