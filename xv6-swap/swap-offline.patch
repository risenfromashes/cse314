diff --git a/Makefile b/Makefile
index 39a99d7..2c3a41b 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,8 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
+  $K/page.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
@@ -132,6 +134,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test1\
+	$U/_test2\
+	$U/_test3\
+	$U/_test4\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +159,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/compile_flags.txt b/compile_flags.txt
new file mode 100644
index 0000000..57dc239
--- /dev/null
+++ b/compile_flags.txt
@@ -0,0 +1 @@
+-I.
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..e935487 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,8 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct swap;
+struct mempage;
 
 // bio.c
 void            binit(void);
@@ -36,6 +38,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -107,6 +111,14 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// swap.c
+void            swapinit(void);
+void            swapfree(struct swap*);
+void            swapref(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -185,5 +197,17 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+// page.c
+void            mempageinit();
+void *          mempageaddr(struct mempage *);
+struct mempage *allocmempage(pagetable_t, pte_t *, int, struct swap *);
+void            freemempagenode(struct mempage *);
+void            freemempage(pte_t *pte);
+void            freemempages(pagetable_t);
+uint            countmempages();
+void            mempagedump();
+int             mempagecopy(pte_t *, uint64, char *);
+
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..2d9b419 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,7 +62,7 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
@@ -88,7 +88,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..66e5b44 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -19,6 +19,8 @@ main()
     kinit();         // physical page allocator
     kvminit();       // create kernel page table
     kvminithart();   // turn on paging
+    swapinit();
+    mempageinit();
     procinit();      // process table
     trapinit();      // trap vectors
     trapinithart();  // install kernel trap vector
diff --git a/kernel/page.c b/kernel/page.c
new file mode 100644
index 0000000..abf8e1a
--- /dev/null
+++ b/kernel/page.c
@@ -0,0 +1,265 @@
+#include "stddef.h"
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "defs.h"
+
+#define MAXPAGES 50
+
+enum state { FREE, ALLOCATED };
+
+struct mempage {
+	void *pa;
+	pte_t	*pte;
+	pagetable_t pagetable;
+	struct mempage *next, *prev;
+} pages[MAXPAGES];
+
+
+static struct mempage *free;
+static struct mempage *head, *tail;
+
+struct spinlock swlock;
+
+uint livepagecount = 0;
+extern uint pagecount;
+
+void 
+mempageinit() 
+{
+	initlock(&swlock, "sw lock");
+	head = NULL;
+	tail = NULL;
+	free = pages;
+
+	for (struct mempage *p = pages; p < &pages[MAXPAGES]; p++) {
+		p->next = p + 1;
+	}
+
+	pages[MAXPAGES - 1].next = NULL;
+}
+
+
+/* allocate an in-memory page and map it to va
+ return 0 on success -1 on failure */
+struct mempage*
+allocmempage(pagetable_t pagetable, pte_t *pte, int flags, struct swap *oldsw) 
+{
+	struct mempage *p;
+
+	acquire(&swlock);
+	if (free) {
+		p = free;
+		free = free->next;
+
+		if (p->pa == NULL) {
+			// not yet allocated, allocate now
+			if ((p->pa = kalloc()) == 0) {
+				free = p;
+				release(&swlock);
+				return NULL;
+			}
+		}
+
+		__sync_fetch_and_add(&livepagecount, 1);
+	} else {
+
+		/* allocate new swap */
+		struct swap *sw = swapalloc();
+
+		if (!head) {
+			panic("allocmempage: no page in linked list");
+		}
+		/* need to swap out a page */
+		p = head;
+		head = head->next;
+		head->prev = NULL;
+
+		release(&swlock);
+		swapout(sw, p->pa);
+		acquire(&swlock);
+
+		int flags = PTE_FLAGS(*p->pte);
+		*(p->pte) = (SW2PTE(sw) | flags | PTE_S) & ~(PTE_V);
+
+	}
+
+	/* push to the end of queue */
+	if (!head) {
+		head = p;
+	}
+
+	p->prev = tail;
+	p->next = NULL;
+
+	if (tail) {
+		tail->next = p;
+	}
+	tail = p;
+	
+	*pte = (PA2PTE(p->pa) | flags | PTE_V) & ~(PTE_S);
+
+	p->pte = pte;
+	p->pagetable = pagetable;
+
+	
+	release(&swlock);
+
+	memset(p->pa, 1, PGSIZE);
+
+	if (oldsw) {
+		swapin(p->pa, oldsw);
+		swapfree(oldsw);
+	} else {
+		__sync_fetch_and_add(&pagecount, 1);
+	}
+
+	return p;
+}
+
+void *
+mempageaddr(struct mempage *p)
+{
+	return p->pa;
+}
+
+static void
+_freemempagenode(struct mempage *p) 
+{
+	pte_t *pte = p->pte;
+	int flags = PTE_FLAGS(*pte);
+
+	if (flags & PTE_S) {
+		panic("Swapped out page in alive pages list");
+	}
+
+	/* unmap pagetable entry */
+	/* but keep flags to avoid panics */
+	/* leave it to uvmunmap to clear flags */
+	*pte = flags;
+
+	/* remove linked list node */
+	if (p->prev) {
+		p->prev->next = p->next;
+	} else {
+		head = p->next;
+	}
+	if (p->next) {
+		p->next->prev = p->prev;
+	} else {
+		tail = p->prev;
+	}
+
+	/* add to free list */
+	p->next = free;
+	free = p;
+
+	/* reset pagetable and pte */
+	p->pagetable = NULL;
+	p->pte = NULL;
+
+	__sync_fetch_and_add(&livepagecount, -1);
+	__sync_fetch_and_add(&pagecount, -1);
+}
+
+void 
+freemempagenode(struct mempage *p)
+{
+	acquire(&swlock);
+	_freemempagenode(p);
+	release(&swlock);
+}
+
+/* free mempage struct holding pte */
+void 
+freemempage(pte_t *pte)
+{
+	int flags = PTE_FLAGS(*pte);
+	if (flags & PTE_S) {
+		panic("Trying to free swapped page");
+	}
+
+	if (!(flags & PTE_V)) {
+		panic("Trying to free invalid page");
+	}
+
+	struct mempage *p, *next;
+	/* find the node with pte */
+	acquire(&swlock);
+	for (p = head; p; p = next) {
+		next = p->next;
+		if (p->pte == pte) {
+			_freemempagenode(p);
+			break;
+		} 	
+	}
+	release(&swlock);
+}
+
+/* free mempage struct holding pagetable */
+void 
+freemempages(pagetable_t pagetable)
+{
+	struct mempage *p, *next;
+
+	acquire(&swlock);
+	/* free all the mempage with given pagetable */
+	for (p = head; p; p = next) {
+		next = p->next;
+		if (p->pagetable == pagetable) {
+			_freemempagenode(p);
+		} 	
+	}
+	release(&swlock);
+}
+
+
+uint
+countmempages() 
+{
+	struct mempage *p;
+	struct proc *pp = myproc();
+	uint count = 0;
+
+	acquire(&swlock);
+	/* free all the mempage with given pagetable */
+	for (p = head; p; p = p->next) {
+		if (p->pagetable == pp->pagetable) {
+			count++;
+		}
+	}
+	release(&swlock);
+
+	return count;
+}
+
+void
+mempagedump() 
+{
+	struct mempage *p;
+	printf("pagecount: %d\n", livepagecount);
+	printf("mempage head: %p\n", head);
+	printf("mempage tail: %p\n", tail);
+	int i = 1;
+	for (p = head; p; p = p->next) {
+		printf("%d. pa: %p, pte: %p, pt: %p, next: %p\n", i++, p->pa, p->pte, p->pagetable, p->next);
+	}
+
+}
+
+int
+mempagecopy(pte_t *pte, uint64 pa, char *dst) 
+{
+	acquire(&swlock);
+	if (PTE2PA(*pte) != pa) {
+		release(&swlock);
+		return -1;
+	}
+	memmove(dst, (char *)pa, PGSIZE);
+	release(&swlock);
+	return 0;
+}
+
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..14d44e8 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -158,8 +158,6 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -210,9 +208,11 @@ proc_pagetable(struct proc *p)
 void
 proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
-  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-  uvmunmap(pagetable, TRAPFRAME, 1, 0);
-  uvmfree(pagetable, sz);
+  if (pagetable) {
+    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+    uvmunmap(pagetable, TRAPFRAME, 1, 0);
+    uvmfree(pagetable, sz);
+  }
 }
 
 // a user program that calls exec("/init")
@@ -288,12 +288,17 @@ fork(void)
     return -1;
   }
 
+  // release lock so that swapin and swapout can be called
+  release(&np->lock);
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
-    release(&np->lock);
     return -1;
   }
+
+  acquire(&np->lock);
+  // re-enable interrupts
+
   np->sz = p->sz;
 
   // copy saved user registers.
@@ -414,9 +419,12 @@ wait(uint64 addr)
             release(&wait_lock);
             return -1;
           }
+          pagetable_t pt = pp->pagetable;
+          uint64 sz = pp->sz;
           freeproc(pp);
           release(&pp->lock);
           release(&wait_lock);
+          proc_freepagetable(pt, sz);
           return pid;
         }
         release(&pp->lock);
@@ -652,6 +660,10 @@ either_copyin(void *dst, int user_src, uint64 src, uint64 len)
   }
 }
 
+extern uint livepagecount;
+extern uint pagecount;
+extern uint swapcount;
+
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
@@ -680,4 +692,9 @@ procdump(void)
     printf("%d %s %s", p->pid, state, p->name);
     printf("\n");
   }
+
+  // mempagedump();
+  printf("Total number of alive pages: %d\n", livepagecount);
+  printf("Total number of pages: %d\n", pagecount);
+  printf("Total number of swaps: %d\n", swapcount);
 }
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..fc8a6d0 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,12 +343,16 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_S (1l << 9) // swapped out
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
 
 #define PTE2PA(pte) (((pte) >> 10) << 12)
 
+#define PTE2SW(pte) ((pte) >> 10)
+#define SW2PTE(sw) (((uint64)sw) << 10)
+
 #define PTE_FLAGS(pte) ((pte) & 0x3FF)
 
 // extract the three 9-bit page table indices from a virtual address.
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..2132971
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,154 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "param.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+uint swapcount = 0;
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+  int ref_count;
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+}
+
+// increase ref count of swap
+void 
+swapref(struct swap *s) 
+{
+  __sync_fetch_and_add(&s->ref_count, 1);  
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+  
+  s = (struct swap*)r;
+  if(s){
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+    s->ref_count = 1;
+    __sync_fetch_and_add(&swapcount, 1);
+  }
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  __sync_fetch_and_add(&s->ref_count, -1);
+  if (__sync_bool_compare_and_swap(&s->ref_count, 0, 0)) {
+    uint *blockno;
+    struct run *r;
+
+    if(!s)
+      panic("swapfree");
+  
+    begin_op();
+    for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+      if(*blockno)
+        bfree(ROOTDEV, *blockno);
+    }
+    end_op();
+
+    r = (struct run*)s;
+
+    acquire(&swapmem.lock);
+    r->next = swapmem.freelist;
+    swapmem.freelist = r;
+    release(&swapmem.lock);
+    __sync_fetch_and_add(&swapcount, -1);
+  } 
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  // printf("swapping out %p to %p\n", src_pa, dst_sp);
+
+  uint *blockno;
+  struct buf *bp;
+  
+  begin_op();
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    *blockno = balloc(ROOTDEV);
+    if(*blockno == 0)
+      panic("swapout");
+    bp = bread(ROOTDEV, *blockno);
+    memmove(bp->data, src_pa, BSIZE);
+    log_write(bp);
+    brelse(bp);
+  }
+  end_op();
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  // printf("swapping in %p from %p\n", dst_pa, src_sp);
+  uint *blockno;
+  struct buf *bp;
+  
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..69751e7 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,31 +101,39 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_livepgcnt(void);
+extern uint64 sys_totallivepgcnt(void);
+extern uint64 sys_pgcnt(void);
+extern uint64 sys_swapcnt(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+[SYS_fork]           = sys_fork,
+[SYS_exit]           = sys_exit,
+[SYS_wait]           = sys_wait,
+[SYS_pipe]           = sys_pipe,
+[SYS_read]           = sys_read,
+[SYS_kill]           = sys_kill,
+[SYS_exec]           = sys_exec,
+[SYS_fstat]          = sys_fstat,
+[SYS_chdir]          = sys_chdir,
+[SYS_dup]            = sys_dup,
+[SYS_getpid]         = sys_getpid,
+[SYS_sbrk]           = sys_sbrk,
+[SYS_sleep]          = sys_sleep,
+[SYS_uptime]         = sys_uptime,
+[SYS_open]           = sys_open,
+[SYS_write]          = sys_write,
+[SYS_mknod]          = sys_mknod,
+[SYS_unlink]         = sys_unlink,
+[SYS_link]           = sys_link,
+[SYS_mkdir]          = sys_mkdir,
+[SYS_close]          = sys_close,
+[SYS_livepgcnt]      = sys_livepgcnt,
+[SYS_totallivepgcnt] = sys_totallivepgcnt,
+[SYS_pgcnt]          = sys_pgcnt,
+[SYS_swapcnt]        = sys_swapcnt,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..dd10c0f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,26 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork           1
+#define SYS_exit           2
+#define SYS_wait           3
+#define SYS_pipe           4
+#define SYS_read           5
+#define SYS_kill           6
+#define SYS_exec           7
+#define SYS_fstat          8
+#define SYS_chdir          9
+#define SYS_dup            10
+#define SYS_getpid         11
+#define SYS_sbrk           12
+#define SYS_sleep          13
+#define SYS_uptime         14
+#define SYS_open           15
+#define SYS_write          16
+#define SYS_mknod          17
+#define SYS_unlink         18
+#define SYS_link           19
+#define SYS_mkdir          20
+#define SYS_close          21
+#define SYS_livepgcnt      22
+#define SYS_totallivepgcnt 23
+#define SYS_pgcnt          24
+#define SYS_swapcnt        25
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..9ce23cb 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,33 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+extern uint livepagecount;
+extern uint pagecount;
+extern uint swapcount;
+
+uint64
+sys_livepgcnt(void)
+{
+  return countmempages();
+}
+
+
+uint64
+sys_totallivepgcnt(void)
+{
+  return livepagecount;
+}
+
+
+uint64
+sys_pgcnt(void)
+{
+  return pagecount;
+}
+
+uint64
+sys_swapcnt(void)
+{
+  return swapcount;
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..8dc1a60 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,6 +65,36 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } else if(r_scause() == 12 || r_scause() == 13 || r_scause() == 15) {
+    // page fault
+    uint64 va = r_stval();
+    pte_t *pte = walk(p->pagetable, va, 0);
+
+    if (pte == 0) {
+      printf("usertrap(): segmentation fault. pid=%d\n", p->pid);
+      printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+      setkilled(p);
+    } else {
+      
+      int flags = PTE_FLAGS(*pte);
+      struct swap *s = (struct swap *)PTE2SW(*pte);
+    
+      if (!(flags & PTE_S)) {
+        printf("usertrap(): unexpected pagefault. pid=%d\n", p->pid);
+        printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+        setkilled(p);
+      } else {
+        /* swapped out page table entry */
+        // printf("Page fault at address: %p, swap: %p\n", va, s);
+        struct mempage *mp;
+        if ((mp = allocmempage(p->pagetable, pte, flags, s)) == 0) {
+          printf("usertrap(): couldn't allocate mempage. pid=%d\n", p->pid);
+          printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+          setkilled(p);
+        }
+      }
+    }
+    
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..487bfca 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,7 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "stddef.h"
 
 /*
  * the kernel's page table.
@@ -15,6 +16,8 @@ extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
 
+uint pagecount = 0;
+
 // Make a direct-map page table for the kernel.
 pagetable_t
 kvmmake(void)
@@ -135,6 +138,27 @@ kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)
     panic("kvmmap");
 }
 
+// ensure page associated with va is loaded into memory
+static int
+uvmloadpage(pagetable_t page, uint64 va) 
+{
+  pte_t *pte = walk(page, va, 0);
+  int flags = PTE_FLAGS(*pte);
+
+  if (((*pte) & PTE_V) == 0 && ((*pte) & PTE_S) == 0) {
+    panic("uvmloadpage: page invalid");
+  }
+
+  if ((*pte) & PTE_S) {
+    struct mempage *p;
+    struct swap *s = (struct swap *)PTE2SW(*pte);
+    if ((p = allocmempage(page, pte, flags, s)) == 0) {
+      return -1;
+    }
+  }
+  return 0;
+}
+
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned. Returns 0 on success, -1 if walk() couldn't
@@ -179,13 +203,22 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0 && (*pte & PTE_S) == 0)
       panic("uvmunmap: not mapped");
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
     if(do_free){
-      uint64 pa = PTE2PA(*pte);
-      kfree((void*)pa);
+      int flags = PTE_FLAGS(*pte);
+      if (flags & PTE_S) {
+        swapfree((struct swap *)PTE2SW(*pte));
+        __sync_fetch_and_add(&pagecount, -1);
+      } else {
+        uint64 pa = PTE2PA(*pte);
+        // may be freed already by a call to freemempages
+        if (pa) {
+          freemempage(pte);
+        }
+      }
     }
     *pte = 0;
   }
@@ -210,13 +243,20 @@ uvmcreate()
 void
 uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
 {
-  char *mem;
+  struct mempage *p;
 
   if(sz >= PGSIZE)
     panic("uvmfirst: more than a page");
-  mem = kalloc();
+  pte_t *pte = walk(pagetable, 0, 1);
+  int flags = PTE_W|PTE_R|PTE_X|PTE_U;
+
+  if((p = allocmempage(pagetable, pte, flags, NULL)) == 0) {
+    panic("uvmfirst: couldn't allocate mempage");
+  }
+
+  char *mem = mempageaddr(p);
+
   memset(mem, 0, PGSIZE);
-  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U);
   memmove(mem, src, sz);
 }
 
@@ -225,7 +265,6 @@ uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
 uint64
 uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
 {
-  char *mem;
   uint64 a;
 
   if(newsz < oldsz)
@@ -233,17 +272,18 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
 
   oldsz = PGROUNDUP(oldsz);
   for(a = oldsz; a < newsz; a += PGSIZE){
-    mem = kalloc();
-    if(mem == 0){
+    pte_t *pte = walk(pagetable, a, 1);
+    if (pte == 0) {
       uvmdealloc(pagetable, a, oldsz);
       return 0;
     }
-    memset(mem, 0, PGSIZE);
-    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
-      kfree(mem);
+    int flags = PTE_R|PTE_U|xperm;
+    struct mempage *p;
+    if ((p = allocmempage(pagetable, pte, flags, NULL)) == 0) {
       uvmdealloc(pagetable, a, oldsz);
       return 0;
-    }
+    } 
+    memset(mempageaddr(p), 0, PGSIZE);
   }
   return newsz;
 }
@@ -291,8 +331,13 @@ freewalk(pagetable_t pagetable)
 void
 uvmfree(pagetable_t pagetable, uint64 sz)
 {
-  if(sz > 0)
+  if(sz > 0) {
+    // free all mempages associated with pagetable to void having to iterate
+    // the list everytime
+    freemempages(pagetable);
+    // free remaining possibly swap pages
     uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+  }
   freewalk(pagetable);
 }
 
@@ -308,22 +353,41 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0 && (*pte & PTE_S) == 0)
       panic("uvmcopy: page not present");
+    if((*pte & PTE_V) != 0 && (*pte & PTE_S) != 0)
+      panic("uvmcopy: page valid and in swap");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+
+    pte_t *new_pte = walk(new, i, 1);
+    if (new_pte == 0) {
       goto err;
     }
+
+    if (flags & PTE_S) {
+      // increase ref count of swap
+      struct swap *s = (struct swap *)PTE2SW(*pte);
+      *new_pte = *pte;
+      swapref(s);
+      __sync_fetch_and_add(&pagecount, 1);
+    } else {
+      struct mempage *p;
+      if((p = allocmempage(new, new_pte, flags, NULL)) == 0)
+        goto err;
+
+      if (mempagecopy(pte, pa, mempageaddr(p)) != 0) {
+        freemempagenode(p);
+        struct swap *s = (struct swap *)PTE2SW(*pte);
+        *new_pte = *pte;
+        swapref(s);
+        __sync_fetch_and_add(&pagecount, 1);
+      }
+    }
   }
   return 0;
 
@@ -353,6 +417,10 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
 
+  if (uvmloadpage(pagetable, dstva) < 0) {
+    return -1;
+  }
+
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
     pa0 = walkaddr(pagetable, va0);
@@ -378,6 +446,10 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 {
   uint64 n, va0, pa0;
 
+  if (uvmloadpage(pagetable, srcva) < 0) {
+    return -1;
+  }
+
   while(len > 0){
     va0 = PGROUNDDOWN(srcva);
     pa0 = walkaddr(pagetable, va0);
@@ -405,6 +477,10 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
   uint64 n, va0, pa0;
   int got_null = 0;
 
+  if (uvmloadpage(pagetable, srcva) < 0) {
+    return -1;
+  }
+
   while(got_null == 0 && max > 0){
     va0 = PGROUNDDOWN(srcva);
     pa0 = walkaddr(pagetable, va0);
diff --git a/user/forktest.c b/user/forktest.c
index 384e75f..a0fd173 100644
--- a/user/forktest.c
+++ b/user/forktest.c
@@ -5,7 +5,7 @@
 #include "kernel/stat.h"
 #include "user/user.h"
 
-#define N  1000
+#define N 1000
 
 void
 print(const char *s)
diff --git a/user/test1.c b/user/test1.c
new file mode 100644
index 0000000..a30b667
--- /dev/null
+++ b/user/test1.c
@@ -0,0 +1,75 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+#define T 10
+
+int main(int argc, char **argv) {
+  if (argc <= 1) {
+    printf("usage: %s <number of additional page to allocate>\n", argv[0]);
+    return 0;
+  }
+
+  int npages = atoi(argv[1]);
+  void **pages = 0;
+  int init = 101;
+
+  if (npages) {
+    pages = malloc(sizeof(void *) * npages);
+  }
+
+  for (int i = 0; i < npages; i++) {
+    // malloc usually calls sbrk with 4096 * 16
+    pages[i] = malloc(4096);
+    memset(pages[i], 0, 4096);
+  }
+  for (int i = 0; i < T; i++) {
+    for (int j = 0; j < npages; j++) {
+      int *v = (int *)pages[j];
+      for (int k = 0; k < 4096 / sizeof(int); k++) {
+        v[k] = init;
+      }
+    }
+  }
+
+  printf("live pages used by process: %d, pid: %d\n", livepgcnt(), getpid());
+  printf("total live pages: %d\n", totallivepgcnt());
+
+  for (int i = 0; i < T; i++) {
+    for (int j = 0; j < npages; j++) {
+      int *v = (int *)pages[j];
+      for (int k = 0; k < 4096 / sizeof(int); k++) {
+        v[k] = v[k] + 1;
+      }
+    }
+  }
+
+  int matched = 1;
+  for (int j = 0; j < npages; j++) {
+    int *v = (int *)pages[j];
+    for (int k = 0; k < 4096 / sizeof(int); k++) {
+      if (v[k] != (init + T)) {
+        matched = 0;
+      }
+    }
+  }
+
+  if (npages) {
+    for (int i = 0; i < npages; i++) {
+      free(pages[i]);
+    }
+    free(pages);
+  }
+
+  if (swapcnt() + livepgcnt() > pgcnt()) {
+    matched = 0;
+    printf("Pages or swaps not freed\n");
+  }
+
+  if (matched) {
+    printf("memory test passed\n");
+  } else {
+    printf("memory test failed\n");
+  }
+
+  return 0;
+}
\ No newline at end of file
diff --git a/user/test2.c b/user/test2.c
new file mode 100644
index 0000000..a39e444
--- /dev/null
+++ b/user/test2.c
@@ -0,0 +1,109 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+#define T 5
+
+int main(int argc, char **argv) {
+  int forks = 4;
+  int npages = 50;
+  void **pages = malloc(sizeof(void *) * npages);
+  const int init = 101;
+
+  for (int i = 0; i < npages; i++) {
+    // malloc usually calls sbrk with 4096 * 16
+    pages[i] = malloc(4096);
+    memset(pages[i], 0, 4096);
+  }
+
+  printf("live pages used by process: %d, pid: %d\n", livepgcnt(), getpid());
+  printf("total live pages: %d\n", totallivepgcnt());
+
+  int pid = getpid();
+
+  for (int i = 0; i < T; i++) {
+    for (int j = 0; j < npages; j++) {
+      int *v = (int *)pages[j];
+      for (int k = 0; k < 4096 / sizeof(int); k++) {
+        v[k] = init;
+      }
+    }
+  }
+
+  for (int i = 0; i < forks; i++) {
+    int pid = fork();    
+    if (pid == 0) {
+      // don't create more forks for children
+      break;
+    }
+  }
+
+  if (pid == getpid()) {
+    // wait for children in parent
+    for (int j = 0; j < npages; j++) {
+      int *v = (int *)pages[j];
+      for (int k = 0; k < 4096 / sizeof(int); k++) {
+        if (v[k] != (init)) {
+          printf("expected: %d, got: %d | pid: %d (main), page: %d, k: %d\n", (init), v[k], pid, j, k);
+          break;
+        }
+      }
+    }
+    for (int i = 0; i < forks; i++) {
+      wait(0);
+    }
+  } else {
+    // verify that we can access and update memory in children
+    int pid = getpid();
+    int matched = 1;
+    for (int j = 0; j < npages; j++) {
+      int *v = (int *)pages[j];
+      for (int k = 0; k < 4096 / sizeof(int); k++) {
+        if (v[k] != (init)) {
+          matched = 0;
+          printf("expected: %d, got: %d | pid: %d, addr: %p, page: %d, k: %d\n", (init), v[k], pid, &v[k], j, k);
+          goto verdict;
+        }
+      }
+    }
+    for (int i = 0; i < T; i++) {
+      for (int j = 0; j < npages; j++) {
+        int *v = (int *)pages[j];
+        for (int k = 0; k < 4096 / sizeof(int); k++) {
+          v[k] = (v[k] + pid);
+        }
+      }
+    }
+    for (int j = 0; j < npages; j++) {
+      int *v = (int *)pages[j];
+      for (int k = 0; k < 4096 / sizeof(int); k++) {
+        if (v[k] != (T * pid + init)) {
+          matched = 0;
+          printf("expected: %d, got: %d | pid: %d, addr: %p, page: %d, k: %d\n", (T * pid + init), v[k], pid, &v[k], j, k);
+          goto verdict;
+        }
+      }
+    }
+
+    if (swapcnt() + livepgcnt() > pgcnt()) {
+      matched = 0;
+      printf("Pages or swaps not freed\n");
+    }
+
+verdict:
+    if (matched) {
+      printf("memory test passed, pid: %d\n", getpid());
+    } else {
+      printf("memory test failed, pid: %d\n", getpid());
+    }
+  }
+
+
+  if (npages) {
+    for (int i = 0; i < npages; i++) {
+      free(pages[i]);
+    }
+    free(pages);
+  }
+
+  return 0;
+}
\ No newline at end of file
diff --git a/user/test3.c b/user/test3.c
new file mode 100644
index 0000000..fd72d29
--- /dev/null
+++ b/user/test3.c
@@ -0,0 +1,3 @@
+int main() {
+  return 0;	
+}
diff --git a/user/test4.c b/user/test4.c
new file mode 100644
index 0000000..fd72d29
--- /dev/null
+++ b/user/test4.c
@@ -0,0 +1,3 @@
+int main() {
+  return 0;	
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..bf333c2 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+uint livepgcnt(void);
+uint totallivepgcnt(void);
+uint pgcnt(void);
+uint swapcnt(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..df9d7ae 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,7 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("livepgcnt");
+entry("totallivepgcnt");
+entry("pgcnt");
+entry("swapcnt");
