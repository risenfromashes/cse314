diff --git a/Makefile b/Makefile
index 39a99d7..8747a34 100644
--- a/Makefile
+++ b/Makefile
@@ -87,7 +87,7 @@ $U/initcode: $U/initcode.S
 tags: $(OBJS) _init
 	etags *.S *.c
 
-ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o
+ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o $U/spinlock.o $U/mutex.o $U/condvar.o $U/semaphore.o
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -T $U/user.ld -o $@ $^
@@ -132,6 +132,12 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_thread\
+	$U/_mtxtest\
+	$U/_spintest\
+	$U/_semtest\
+	$U/_semcvtest\
+	$U/_producer_consumer\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +159,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 8
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/compile_flags.txt b/compile_flags.txt
new file mode 100644
index 0000000..57dc239
--- /dev/null
+++ b/compile_flags.txt
@@ -0,0 +1 @@
+-I.
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..fa14cc4 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -85,7 +85,9 @@ void            printfinit(void);
 int             cpuid(void);
 void            exit(int);
 int             fork(void);
-int             growproc(int);
+int             clone(uint64 fcn, uint64 arg, uint64 stack);
+int             join(int);
+int             growproc(int, uint64*);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
 void            proc_freepagetable(pagetable_t, uint64);
@@ -95,6 +97,7 @@ void            setkilled(struct proc*);
 struct cpu*     mycpu(void);
 struct cpu*     getmycpu(void);
 struct proc*    myproc();
+void            smeminit(void);
 void            procinit(void);
 void            scheduler(void) __attribute__((noreturn));
 void            sched(void);
@@ -106,6 +109,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             fwait(uint64, int);
+void            fwake(uint64, int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -164,12 +169,15 @@ pagetable_t     uvmcreate(void);
 void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
+uint64          uvmdemirror(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64, uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
 pte_t *         walk(pagetable_t, uint64, int);
 uint64          walkaddr(pagetable_t, uint64);
+uint64          vatopa(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..2b3ec8f 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -20,6 +20,7 @@ main()
     kvminit();       // create kernel page table
     kvminithart();   // turn on paging
     procinit();      // process table
+    smeminit();      // sharedmem table
     trapinit();      // trap vectors
     trapinithart();  // install kernel trap vector
     plicinit();      // set up interrupt controller
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..3204fdb 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -10,6 +10,8 @@ struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
 
+struct smem smem[NPROC];
+
 struct proc *initproc;
 
 int nextpid = 1;
@@ -17,15 +19,44 @@ struct spinlock pid_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
+static void freesmem(struct smem *s);
+
+static void wakeup2(struct proc *cp, void *chan);
 
 extern char trampoline[]; // trampoline.S
 
-// helps ensure that wakeups of wait()ing
+// helps ensure that wakeups of wait()ing and join()ing
 // parents are not lost. helps obey the
 // memory model when using p->parent.
 // must be acquired before any p->lock.
 struct spinlock wait_lock;
 
+
+// lock must be held
+static void 
+smem_up(struct smem *smem) 
+{
+  if (smem->state == UNUSED) {
+    panic("Referencing UNUSED smem");
+  }
+  smem->ref_count++;
+}
+
+// smem->lock and proc->lock must be held
+static void 
+smem_down(struct smem *smem, struct proc* p) 
+{
+  smem->ref_count--;
+  if(smem->ref_count == 0) {
+    proc_freepagetable(p->pagetable, p->sz);
+    freesmem(smem);
+  } else {
+    // delete page table but not physical addresses
+    uvmdemirror(p->pagetable, p->sz, 0);
+    proc_freepagetable(p->pagetable, 0);
+  }
+}
+
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
@@ -58,6 +89,20 @@ procinit(void)
   }
 }
 
+
+// initialize the smem table.
+void
+smeminit(void)
+{
+  struct smem *s;
+
+  for(s = smem; s < &smem[NPROC]; s++) {
+      initlock(&s->lock, "smem");
+      s->ref_count = 0;
+      s->state = UNUSED;
+  }
+}
+
 // Must be called with interrupts disabled,
 // to prevent race with process being moved
 // to a different CPU.
@@ -102,14 +147,43 @@ allocpid()
   return pid;
 }
 
+
+// Look in the smem table for an UNUSED smem
+// return with smem->lock held
+static struct smem* 
+allocsmem(void) 
+{
+  struct smem *s;
+  // look for free smem struct
+  for(s = smem; s < &smem[NPROC]; s++) {
+    acquire(&s->lock);
+    if(s->state == UNUSED) {
+      s->state = USED;
+      return s;
+    } else {
+      release(&s->lock);
+    }
+  }
+  return 0;
+}
+
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
 // If there are no free procs, or a memory allocation fails, return 0.
 static struct proc*
-allocproc(void)
+allocproc(int is_thread)
 {
   struct proc *p;
+  struct smem *smem;
+
+  if(!is_thread) {
+    if ((smem = allocsmem()) == 0) {
+      return 0;    
+    }
+    smem_up(smem);
+  }
 
   for(p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
@@ -122,13 +196,18 @@ allocproc(void)
   return 0;
 
 found:
+  p->is_thread = is_thread;
   p->pid = allocpid();
   p->state = USED;
 
+  if(!is_thread) {
+    p->smem = smem;
+  }
+
+
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
-    release(&p->lock);
     return 0;
   }
 
@@ -136,10 +215,12 @@ found:
   p->pagetable = proc_pagetable(p);
   if(p->pagetable == 0){
     freeproc(p);
-    release(&p->lock);
     return 0;
   }
 
+  if (!p->is_thread) {
+    p->mem_id = p->pid;    
+  }
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
@@ -149,17 +230,25 @@ found:
   return p;
 }
 
+
+
 // free a proc structure and the data hanging from it,
 // including user pages.
-// p->lock must be held.
+// p->lock must be held, smem->lock must be held
+// releases both
 static void
 freeproc(struct proc *p)
 {
+  struct smem *smem;
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  p->mem_id = 0;
+  p->is_thread = 0;
+  if(p->pagetable) {
+    // decrease ref count of base pagetable
+    smem_down(p->smem, p);
+  }
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -169,6 +258,20 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  smem = p->smem;
+  p->smem = 0;
+  release(&p->lock);
+  release(&smem->lock);
+}
+
+
+// free a smem structure
+// s->lock must be held.
+static void
+freesmem(struct smem *s)
+{
+  s->ref_count = 0;
+  s->state = UNUSED;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -234,7 +337,7 @@ userinit(void)
 {
   struct proc *p;
 
-  p = allocproc();
+  p = allocproc(0);
   initproc = p;
   
   // allocate one user page and copy initcode's instructions
@@ -252,28 +355,100 @@ userinit(void)
   p->state = RUNNABLE;
 
   release(&p->lock);
+  release(&p->smem->lock);
 }
 
 // Grow or shrink user memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
-{
-  uint64 sz;
-  struct proc *p = myproc();
+// returns old size by oldsz pointer
+int 
+growproc(int n, uint64* oldsz) {
+  uint64 sz, new_sz;
+  int mem_id, pid;
+
+  struct proc *mp = myproc();
+
+  // must acquire mp->lock before smem->lock to avoid deadlock
+  acquire(&mp->smem->lock);
+  sz = mp->sz;
+  new_sz = mp->sz + n;
 
-  sz = p->sz;
-  if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+  mem_id = mp->mem_id;
+  pid = mp->pid;
+
+
+  if (new_sz > sz) {
+    // allocate for self
+    if ((mp->sz = uvmalloc(mp->pagetable, sz, new_sz, PTE_W)) == 0) {
+      mp->sz = sz;
+      release(&mp->smem->lock);
       return -1;
     }
-  } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
+
+    // mirror for rest
+    for(struct proc* p = proc; p < &proc[NPROC]; p++) {
+      if(p != mp) {
+        acquire(&p->lock);
+        if (p->mem_id == mem_id && p->pid != pid && p->killed == 0) {
+          if (p->sz != sz) {
+            panic("Pagetables not synchronized");
+          }
+
+          if (uvmmirror(mp->pagetable, p->pagetable, sz, new_sz) < 0) {
+            // reset to original size
+            p->sz = sz;
+            release(&p->lock);
+            goto bad;
+          }
+          p->sz = mp->sz;
+        }
+        release(&p->lock);
+      }
+    }
+  } else if (new_sz < sz) {
+    // deallocate for self
+    mp->sz = uvmdealloc(mp->pagetable, sz, new_sz);
+    // deallocate for others
+    for(struct proc* p = proc; p < &proc[NPROC]; p++) {
+      if (p != mp) {
+        acquire(&p->lock);
+        if (p->mem_id == mem_id && p->pid != pid && p->killed == 0) {
+          if (p->sz != sz) {
+            panic("Pagetables not synchronized");
+          }
+          p->sz = uvmdemirror(p->pagetable, sz, new_sz);
+        }
+        release(&p->lock);
+      }
+    }
   }
-  p->sz = sz;
+  release(&mp->smem->lock);
+  *oldsz = sz;
   return 0;
+bad:
+  // deallocate for self
+  uvmdealloc(mp->pagetable, mp->sz, sz);
+  mp->sz = sz;
+  // deallocate for others
+  for(struct proc* p = proc; p < &proc[NPROC]; p++) {
+    if (mp != p) {
+      acquire(&p->lock);
+      if (p->mem_id == mem_id && p->pid != pid && p->killed == 0) {
+        if (p->sz != sz) {
+          uvmdemirror(p->pagetable, p->sz, sz);
+          mp->sz = sz;
+        }
+      }
+      release(&p->lock);
+    }
+  }
+
+  release(&mp->smem->lock);
+  return -1;
 }
 
+
+
 // Create a new process, copying the parent.
 // Sets up child kernel stack to return as if from fork() system call.
 int
@@ -284,16 +459,16 @@ fork(void)
   struct proc *p = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if((np = allocproc(0)) == 0){
     return -1;
   }
 
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
-    release(&np->lock);
     return -1;
   }
+
   np->sz = p->sz;
 
   // copy saved user registers.
@@ -313,9 +488,99 @@ fork(void)
   pid = np->pid;
 
   release(&np->lock);
+  release(&np->smem->lock);
+
+  acquire(&wait_lock);
+  np->parent = p->is_thread ? p->parent : p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+
+// Create a new process, copying the parent.
+// Sets up child kernel stack to return as if from fork() system call.
+int 
+clone(uint64 fcn, uint64 arg, uint64 stack) {
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+  struct proc *ap = p;
+  uint64 sp = stack + PGSIZE;
+
+  // both checks are required
+  // if a process is killed, ap->killed will be set first
+  // however after it's in zombie state and the threads are reparented
+  // ap points to the init process
+  // but by then p->killed will be set
+
+  if (p->killed) {
+    // already kill and/or reparented
+    return -1;
+  }
+
+  if (p->is_thread) {
+    // actual main process
+    acquire(&wait_lock);
+    ap = p->parent;
+    release(&wait_lock);
+
+    // parent killed but haven't exitted yet
+    if (ap->killed) {
+      return -1;
+    }
+  }
+
+
+  acquire(&p->smem->lock);
+    // Allocate process.
+  if ((np = allocproc(1)) == 0) {
+    return -1;
+  }
+
+  // mirror parent page table
+  if (uvmmirror(p->pagetable, np->pagetable, 0, p->sz) < 0) {
+    freeproc(np);
+    return -1;
+  }
+
+  np->mem_id = p->mem_id;
+
+  np->smem = p->smem;
+  np->sz = p->sz;
+  smem_up(np->smem);
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // align by 16 bytes
+  sp -= (sp % 16);
+
+  // prepare trapframe
+  np->trapframe->ra = 0xFFFFFFFF; // fake return
+  np->trapframe->epc = fcn;
+  np->trapframe->a0 = arg;
+  np->trapframe->sp = sp;
+
+  // increment reference counts on open file descriptors.
+  for (i = 0; i < NOFILE; i++)
+    if (p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+  release(&p->smem->lock);
 
   acquire(&wait_lock);
-  np->parent = p;
+  np->parent = p->is_thread ? p->parent : p;
   release(&wait_lock);
 
   acquire(&np->lock);
@@ -365,26 +630,54 @@ exit(int status)
   end_op();
   p->cwd = 0;
 
-  acquire(&wait_lock);
+  if (!p->is_thread) {
+    // kill all child threads
+    for(struct proc* pp = proc; pp < &proc[NPROC]; pp++) {
+      acquire(&pp->lock);
+      if (pp->mem_id == p->pid && pp->is_thread) {
+        pp->killed = 1;
+        if(pp->state == SLEEPING) {
+          pp->state = RUNNABLE;
+        }
+      }
+      release(&pp->lock);
+    }
 
-  // Give any children to init.
-  reparent(p);
+    acquire(&wait_lock);
 
-  // Parent might be sleeping in wait().
-  wakeup(p->parent);
+    // Give any children to init.
+    reparent(p);
+
+    // Parent might be sleeping in wait().
+    wakeup(p->parent);
   
-  acquire(&p->lock);
+    acquire(&p->lock);
 
-  p->xstate = status;
-  p->state = ZOMBIE;
+    p->xstate = status;
+    p->state = ZOMBIE;
 
-  release(&wait_lock);
+    release(&wait_lock);
+  } else {
+    acquire(&wait_lock);
+    if (p->parent == initproc) {
+      // parent may have been killed
+      wakeup(initproc);
+    } else {
+      // for join
+      wakeup(p);
+    }
+
+    acquire(&p->lock);
+    p->state = ZOMBIE;
+    release(&wait_lock);
+  }
 
   // Jump into the scheduler, never to return.
   sched();
   panic("zombie exit");
 }
 
+
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
 int
@@ -401,25 +694,36 @@ wait(uint64 addr)
     havekids = 0;
     for(pp = proc; pp < &proc[NPROC]; pp++){
       if(pp->parent == p){
+        // this is to avoid potential deadlock
+        // smem lock must be acquired first
+        acquire(&pp->smem->lock);
         // make sure the child isn't still in exit() or swtch().
         acquire(&pp->lock);
 
         havekids = 1;
         if(pp->state == ZOMBIE){
           // Found one.
-          pid = pp->pid;
-          if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
-                                  sizeof(pp->xstate)) < 0) {
-            release(&pp->lock);
+          if (!pp->is_thread) {
+            // process
+            pid = pp->pid;
+            if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+                                    sizeof(pp->xstate)) < 0) {
+              release(&pp->lock);
+              release(&pp->smem->lock);
+              release(&wait_lock);
+              return -1;
+            }
+            freeproc(pp);
             release(&wait_lock);
-            return -1;
+            return pid;
+          } else {
+            freeproc(pp);
+            continue;
+            // continue, don't wakeup if child thread exits
           }
-          freeproc(pp);
-          release(&pp->lock);
-          release(&wait_lock);
-          return pid;
         }
         release(&pp->lock);
+        release(&pp->smem->lock);
       }
     }
 
@@ -428,12 +732,77 @@ wait(uint64 addr)
       release(&wait_lock);
       return -1;
     }
-    
     // Wait for a child to exit.
     sleep(p, &wait_lock);  //DOC: wait-sleep
   }
 }
 
+
+// Join thread with another thread
+// Thread must be created before joined
+// Return -1 if this process has no children.
+int
+join(int tid)
+{
+  struct proc *pp;
+  int mem_id;
+  struct proc *p = myproc();
+
+
+  mem_id = p->mem_id;
+  if (p->pid == tid) {
+    // cannot join with self
+    return -1;
+  }
+  if (p->mem_id == tid) {
+    // cannot join main thread with other thread
+    return -1;
+  }
+
+  acquire(&wait_lock);
+
+  // find process with matching pid
+  int found = 0;
+  for(pp = proc; pp < &proc[NPROC]; pp++) {
+    for(;;) {
+      acquire(&pp->lock);
+      if (pp->mem_id == mem_id && pp->pid == tid) {
+        found = 1;
+        if(killed(p)) {
+          release(&pp->lock);
+          release(&wait_lock);
+          return -1;
+        }
+
+        if (pp->state == ZOMBIE) {
+          // Found one.
+          pp->parent = initproc;
+          wakeup2(pp, initproc);
+
+          release(&pp->lock);
+          release(&wait_lock);
+          return tid;
+        }
+
+        release(&pp->lock);
+        sleep(pp, &wait_lock);
+      } else if (found) {
+        // already freed by wait()
+        release(&pp->lock);
+        release(&wait_lock);
+        return tid;
+      } else {
+        break;
+      }
+    }
+    release(&pp->lock);
+  }
+
+  // no thread with given tid created yet
+  release(&wait_lock);
+  return -1;
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -561,6 +930,44 @@ sleep(void *chan, struct spinlock *lk)
   acquire(lk);
 }
 
+// futex wait, sleep if addr contains value
+int
+fwait(uint64 uaddr, int value)
+{
+  struct proc *p = myproc();
+  acquire(&p->smem->lock);
+  int *addr = (int *)vatopa(p->pagetable, uaddr);
+  
+  if (__sync_bool_compare_and_swap(addr, value, value)) {
+    sleep(addr, &p->smem->lock);
+    release(&p->smem->lock);
+    return 0;
+  } 
+
+  release(&p->smem->lock);
+  return -1;
+}
+
+void
+fwake(uint64 uaddr, int n)
+{
+  struct proc *p = myproc();
+  acquire(&p->smem->lock);
+  int *addr = (int *)vatopa(p->pagetable, uaddr);
+
+  for (struct proc *pp = proc; pp < &proc[NPROC] && n > 0; pp++) {
+    acquire(&pp->lock);
+    if (p->mem_id == pp->mem_id && pp->chan == addr && pp->state == SLEEPING) {
+      pp->state = RUNNABLE;
+      n--;
+    }
+    release(&pp->lock);
+  }
+
+  release(&p->smem->lock);
+}
+
+
 // Wake up all processes sleeping on chan.
 // Must be called without any p->lock.
 void
@@ -579,6 +986,24 @@ wakeup(void *chan)
   }
 }
 
+// Wakeup all processes sleeping on chan except cp
+static void
+wakeup2(struct proc *cp, void *chan)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(cp != p && p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->chan == chan) {
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+    }
+  }
+}
+
+
 // Kill the process with the given pid.
 // The victim won't exit until it tries to return
 // to user space (see usertrap() in trap.c).
@@ -603,6 +1028,7 @@ kill(int pid)
   return -1;
 }
 
+
 void
 setkilled(struct proc *p)
 {
@@ -659,17 +1085,18 @@ void
 procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [USED]      "used",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
+  [UNUSED]    = "unused",
+  [USED]      = "used",
+  [SLEEPING]  = "sleep ",
+  [RUNNABLE]  = "runble",
+  [RUNNING]   = "run   ",
+  [ZOMBIE]    = "zombie"
   };
   struct proc *p;
   char *state;
 
   printf("\n");
+  printf("pid\tstate\tname\tparent\tmem_id\tsz\tthread\n");
   for(p = proc; p < &proc[NPROC]; p++){
     if(p->state == UNUSED)
       continue;
@@ -677,7 +1104,21 @@ procdump(void)
       state = states[p->state];
     else
       state = "???";
-    printf("%d %s %s", p->pid, state, p->name);
+    printf("%d\t%s\t%s\t%d\t%d\t%d\t%d", p->pid, state, p->name, p->parent ? p->parent->pid : 0, p->mem_id, p->sz, p->is_thread);
+    printf("\n");
+  }
+
+  printf("\n");
+  printf("idx\tstate\tref count\n");
+  for(struct smem *s = smem; s < &smem[NPROC]; s++){
+    if(s->state == UNUSED)
+      continue;
+    if(s->state >= 0 && s->state < NELEM(states) && states[s->state])
+      state = states[s->state];
+    else
+      state = "???";
+    printf("%d\t%s\t%d", (s - smem), state, s->ref_count);
     printf("\n");
   }
 }
+
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..8cb8dc1 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -20,10 +20,10 @@ struct context {
 
 // Per-CPU state.
 struct cpu {
-  struct proc *proc;          // The process running on this cpu, or null.
-  struct context context;     // swtch() here to enter scheduler().
-  int noff;                   // Depth of push_off() nesting.
-  int intena;                 // Were interrupts enabled before push_off()?
+  struct proc *proc;      // The process running on this cpu, or null.
+  struct context context; // swtch() here to enter scheduler().
+  int noff;               // Depth of push_off() nesting.
+  int intena;             // Were interrupts enabled before push_off()?
 };
 
 extern struct cpu cpus[NCPU];
@@ -81,27 +81,40 @@ struct trapframe {
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+// structure to bookkeep memory shared by threads
+struct smem {
+  struct spinlock lock;
+  // lock must be held
+  int ref_count;
+  // either USED or UNUSED
+  enum procstate state;
+};
+
 // Per-process state
 struct proc {
   struct spinlock lock;
 
   // p->lock must be held when using these:
-  enum procstate state;        // Process state
-  void *chan;                  // If non-zero, sleeping on chan
-  int killed;                  // If non-zero, have been killed
-  int xstate;                  // Exit status to be returned to parent's wait
-  int pid;                     // Process ID
+  enum procstate state; // Process state
+  void *chan;           // If non-zero, sleeping on chan
+  int killed;           // If non-zero, have been killed
+  int xstate;           // Exit status to be returned to parent's wait
+  int pid;              // Process ID
+  int is_thread;        // If non-zero, this is a thread
+  int mem_id;           // Thread's parent ID
 
-  // wait_lock must be held when using this:
-  struct proc *parent;         // Parent process
+  // wait_lock must be held when using these:
+  struct proc *parent; // Parent process
 
   // these are private to the process, so p->lock need not be held.
   uint64 kstack;               // Virtual address of kernel stack
-  uint64 sz;                   // Size of process memory (bytes)
   pagetable_t pagetable;       // User page table
   struct trapframe *trapframe; // data page for trampoline.S
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  struct smem *smem; // Shared memory bookkeeping
+  uint64 sz;         // Size of process memory (bytes)
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..1bf5c0a 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,31 +101,41 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_fwait(void);
+extern uint64 sys_fwake(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+  [SYS_fork]            = sys_fork,
+  [SYS_exit]            = sys_exit,
+  [SYS_wait]            = sys_wait,
+  [SYS_pipe]            = sys_pipe,
+  [SYS_read]            = sys_read,
+  [SYS_kill]            = sys_kill,
+  [SYS_exec]            = sys_exec,
+  [SYS_fstat]           = sys_fstat,
+  [SYS_chdir]           = sys_chdir,
+  [SYS_dup]             = sys_dup,
+  [SYS_getpid]          = sys_getpid,
+  [SYS_sbrk]            = sys_sbrk,
+  [SYS_sleep]           = sys_sleep,
+  [SYS_uptime]          = sys_uptime,
+  [SYS_open]            = sys_open,
+  [SYS_write]           = sys_write,
+  [SYS_mknod]           = sys_mknod,
+  [SYS_unlink]          = sys_unlink,
+  [SYS_link]            = sys_link,
+  [SYS_mkdir]           = sys_mkdir,
+  [SYS_close]           = sys_close,
+  [SYS_thread_create]   = sys_thread_create,
+  [SYS_thread_exit]     = sys_thread_exit,
+  [SYS_thread_join]     = sys_thread_join,
+  [SYS_fwait]           = sys_fwait,
+  [SYS_fwake]           = sys_fwake,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..12f6a17 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,27 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork          1
+#define SYS_exit          2
+#define SYS_wait          3
+#define SYS_pipe          4
+#define SYS_read          5
+#define SYS_kill          6
+#define SYS_exec          7
+#define SYS_fstat         8
+#define SYS_chdir         9
+#define SYS_dup           10
+#define SYS_getpid        11
+#define SYS_sbrk          12
+#define SYS_sleep         13
+#define SYS_uptime        14
+#define SYS_open          15
+#define SYS_write         16
+#define SYS_mknod         17
+#define SYS_unlink        18
+#define SYS_link          19
+#define SYS_mkdir         20
+#define SYS_close         21
+#define SYS_thread_create 22
+#define SYS_thread_exit   23
+#define SYS_thread_join   24
+#define SYS_fwait         25
+#define SYS_fwake         26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..cdb29bf 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -42,8 +42,7 @@ sys_sbrk(void)
   int n;
 
   argint(0, &n);
-  addr = myproc()->sz;
-  if(growproc(n) < 0)
+  if(growproc(n, &addr) < 0)
     return -1;
   return addr;
 }
@@ -89,3 +88,49 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64 
+sys_thread_create(void)
+{
+  uint64 fcn, arg, stack;
+  argaddr(0, &fcn);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+  return clone(fcn, arg, stack);
+}
+
+uint64 
+sys_thread_exit(void)
+{
+  exit(0);
+  return 0;
+}
+
+uint64 
+sys_thread_join(void)
+{
+  int tid;
+  argint(0, &tid);
+  return join(tid);
+}
+
+
+uint64
+sys_fwait() {
+  uint64 addr;
+  int v;
+  argaddr(0, &addr);
+  argint(1, &v);
+  return fwait(addr, v);
+}
+
+uint64
+sys_fwake() {
+  uint64 addr;
+  int n;
+  argaddr(0, &addr);
+  argint(1, &n);
+  fwake(addr, n);
+  return 0;
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..e4845ef 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -124,6 +124,14 @@ walkaddr(pagetable_t pagetable, uint64 va)
   pa = PTE2PA(*pte);
   return pa;
 }
+// convert va to pa
+uint64
+vatopa(pagetable_t pagetable, uint64 va) 
+{
+  uint64 page = walkaddr(pagetable, va);
+  uint64 baseva = PGROUNDDOWN(va);
+  return page + (va - baseva);
+}
 
 // add a mapping to the kernel page table.
 // only used when booting.
@@ -266,6 +274,21 @@ uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
   return newsz;
 }
 
+// only unmap pagetables for threads
+uint64
+uvmdemirror(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+{
+  if(newsz >= oldsz)
+    return oldsz;
+
+  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 0);
+  }
+
+  return newsz;
+}
+
 // Recursively free page-table pages.
 // All leaf mappings must already have been removed.
 void
@@ -332,6 +355,39 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+// Given a parent process's page table, 
+// map it's memory into a child thread
+// its memory into a child's page table.
+// Copies both the page table but not physical memory
+// returns 0 on success, -1 on failure.
+// frees any allocated pages on failure.
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 start, uint64 end)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  start = PGROUNDUP(start);
+
+  for(i = start; i < end; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmmirror: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmmirror: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 0);
+  return -1;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/condvar.c b/user/condvar.c
new file mode 100644
index 0000000..7a577e8
--- /dev/null
+++ b/user/condvar.c
@@ -0,0 +1,126 @@
+#include "kernel/types.h"
+#include "user/mutex.h"
+#include "user/condvar.h"
+#include "user/user.h"
+#include "limits.h"
+#include "stddef.h"
+
+
+
+static int 
+empty(struct thread_condvar *cv) 
+{
+	return cv->front == cv->back;
+}
+
+static int 
+full(struct thread_condvar *cv) 
+{
+	return ((cv->front + 1) % CVQLEN) == cv->back;
+}
+
+/* pop front element */
+static int*
+pop(struct thread_condvar *cv) 
+{
+	if(empty(cv)) {
+   return NULL;
+	}
+ int *ret = &cv->q[cv->front];
+	cv->front = (cv->front + 1) % CVQLEN;
+ return ret;
+}
+
+
+/* push into queue */
+static int*
+push(struct thread_condvar *cv) 
+{
+	if(full(cv)) {
+		printf("CV queue full");
+		exit(1);
+	}
+	int *ret = &cv->q[cv->back];
+	cv->back = (cv->back + 1) % CVQLEN;
+	return ret;
+}
+
+
+void 
+thread_cond_init(struct thread_condvar *cv)
+{
+	for(int i = 0; i < CVQLEN; i++) {
+		cv->q[i] = 0;
+	}	
+	cv->front = cv->back = 0;
+	cv->n = 0;
+}
+
+void 
+thread_cond_wait(struct thread_condvar *cv, struct thread_mutex *m)
+{
+	int *s = push(cv);
+	int spin = MAXSPIN;
+	// pushed to queue
+	__sync_fetch_and_and(s, 0);
+	// pushed, can unlock without potential lost wakeup
+	thread_mutex_unlock(m);
+
+	while(__sync_bool_compare_and_swap(s, 0, 0)) {
+		if (spin > 0) {
+			spin--;
+		} else {
+			__sync_fetch_and_add(&cv->n, 1);
+			fwait(s, 0);
+			__sync_fetch_and_add(&cv->n, -1);
+		}
+	}
+	
+	thread_mutex_lock(m);
+}
+
+void 
+thread_cond_signal(struct thread_condvar *cv)
+{
+	__sync_synchronize();
+
+	int *s;
+
+	if((s = pop(cv))) {
+		__sync_bool_compare_and_swap(s, 0, 1);
+		// is there actually someone waiting on the cv?
+		if (!__sync_bool_compare_and_swap(&cv->n, 0, 0)) {
+			fwake(s, 1); 
+		}
+	}
+}
+
+void 
+thread_cond_broadcast(struct thread_condvar *cv)
+{
+	__sync_synchronize();
+
+	int *s;
+
+	while((s = pop(cv))) {
+		__sync_bool_compare_and_swap(s, 0, 1);
+		// is there actually someone waiting on the cv?
+		if (!__sync_bool_compare_and_swap(&cv->n, 0, 0)) {
+			fwake(s, 1); 
+		}
+	}
+}
diff --git a/user/condvar.h b/user/condvar.h
new file mode 100644
index 0000000..9170bae
--- /dev/null
+++ b/user/condvar.h
@@ -0,0 +1,13 @@
+/* NPROC + 1 */
+#define CVQLEN 65
+
+struct thread_condvar {
+  int q[CVQLEN];
+  int front, back;
+  int n;
+};
+
+void thread_cond_init(struct thread_condvar *);
+void thread_cond_wait(struct thread_condvar *, struct thread_mutex *);
+void thread_cond_signal(struct thread_condvar *);
+void thread_cond_broadcast(struct thread_condvar *);
diff --git a/user/init.c b/user/init.c
index e0a5689..0d6b824 100644
--- a/user/init.c
+++ b/user/init.c
@@ -42,6 +42,7 @@ main(void)
       wpid = wait((int *) 0);
       if(wpid == pid){
         // the shell exited; restart it.
+        printf("init: exitted early\n");
         break;
       } else if(wpid < 0){
         printf("init: wait returned an error\n");
diff --git a/user/mtxtest.c b/user/mtxtest.c
new file mode 100644
index 0000000..0300abd
--- /dev/null
+++ b/user/mtxtest.c
@@ -0,0 +1,153 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/sync.h"
+
+int N = 24;
+
+struct balance {
+  char name[32];
+  int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay(unsigned int d) {
+  unsigned int i;
+  for (i = 0; i < d; i++) {
+    __asm volatile("nop" :::);
+  }
+
+  return i;
+}
+
+volatile int _tid = 0;
+int *x[2];
+int n = 10000;
+
+struct thread_mutex printlock;
+struct thread_mutex smemlock;
+struct thread_mutex mlock;
+struct thread_mutex lock;
+struct thread_sem sem;
+
+int *smem;
+
+
+void do_work(void *arg) {
+  int i;
+  int old;
+  int tid;
+  tid = _tid++;
+
+  struct balance *b = (struct balance *)arg;
+  x[tid] = malloc(sizeof(int) * n);
+
+
+  for (int i = 0; i < n; i++) {
+    x[tid][i] = i;
+  }
+
+  for (i = 0; i < b->amount; i++) {
+    // lock and mlock will be implemented by you.
+    thread_mutex_lock(&lock);
+    thread_mutex_lock(&mlock);
+    old = total_balance;
+    delay(100000);
+    // if(old != total_balance)  printf("we will miss an update. old: %d
+    // total_balance: %d\n", old, total_balance);
+    total_balance = old + 1;
+    thread_mutex_unlock(&lock);
+    thread_mutex_unlock(&mlock);
+  }
+
+  for (int i = 0; i < n; i++) {
+    thread_mutex_lock(&smemlock);
+    smem[i]++;
+    delay(100000);
+    thread_mutex_unlock(&smemlock);
+  }
+
+  thread_sem_post(&sem);
+
+
+  thread_exit();
+  return;
+}
+
+void empty_task() {
+
+  for (int i = 0; i < n; i++) {
+    thread_mutex_lock(&smemlock);
+    smem[i]++;
+    delay(100000);
+    thread_mutex_unlock(&smemlock);
+  }
+
+  thread_sem_post(&sem);
+
+  int *x = (int*)malloc(sizeof(int)*n);
+  int i = 0;
+  while(1){
+    x[i]++;
+    i = (i + 1) % n;
+  }
+
+  thread_exit();
+  return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  void *s1, *s2, *s3;
+  int thread1, thread2, r1, r2;
+
+  thread_mutex_init(&printlock);
+  thread_mutex_init(&smemlock);
+  thread_mutex_init(&mlock);
+  thread_mutex_init(&lock);
+  thread_sem_init(&sem, 0);
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  smem = malloc(sizeof(int) * n);
+  memset(smem, 0, sizeof(int) * n);
+
+  thread2 = thread_create(do_work, (void *)&b2, s2);
+  thread1 = thread_create(do_work, (void *)&b1, s1);
+
+  for(int i = 0; i < (N - 2); i++) {
+    s3 = malloc(4096);
+    thread_create(empty_task, 0, s3);
+  }
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  for(int i = 0; i < N; i++){
+    thread_sem_wait(&sem);
+  }
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", thread1, r1,
+         thread2, r2, total_balance);
+  printf("Thread 1 malloced: %p\n", x[0]);
+  printf("Thread 2 malloced: %p\n", x[1]);
+  for (int i = 0; i < n; i++) {
+    if (x[0][i] != i || x[1][i] != i) {
+      printf("Doesn't match\n");
+      printf("%d vs %d for %d\n", x[0][i], x[0][i], i);
+      return 0;
+    }
+    if (smem[i] != N) {
+      printf("is't N\n");
+      printf("smem[i] = %d\n", smem[i]);
+      return 0;
+    }
+  }
+  printf("Passed\n");
+  exit(0);
+}
diff --git a/user/mutex.c b/user/mutex.c
new file mode 100644
index 0000000..5223b8b
--- /dev/null
+++ b/user/mutex.c
@@ -0,0 +1,42 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "user/mutex.h"
+
+
+
+void 
+thread_mutex_init(struct thread_mutex *m)
+{
+  m->locked = 0; 
+  m->n = 0;
+}
+
+void 
+thread_mutex_lock(struct thread_mutex *m)
+{
+  int spin = MAXSPIN;
+  // spinlock for a while
+  // try to atomically set locked
+  while(__sync_lock_test_and_set(&m->locked, 1) != 0) {
+    if (spin > 0) {
+      spin--;
+    } else {
+      __sync_fetch_and_add(&m->n, 1);
+      fwait(&m->locked, 1);
+      __sync_fetch_and_add(&m->n, -1);
+    }
+  }
+  __sync_synchronize();
+}
+
+void 
+thread_mutex_unlock(struct thread_mutex *m)
+{
+  __sync_synchronize();
+  __sync_lock_release(&m->locked);
+  if (!__sync_bool_compare_and_swap(&m->n, 0, 0)) {
+    // wake up everyone, whoever sets locked first gets lock
+    fwake(&m->locked, 1024 /* more than NPROC */);
+  }
+}
+
diff --git a/user/mutex.h b/user/mutex.h
new file mode 100644
index 0000000..0facde5
--- /dev/null
+++ b/user/mutex.h
@@ -0,0 +1,9 @@
+
+struct thread_mutex {
+  int locked;
+  int n;
+};
+
+void thread_mutex_init(struct thread_mutex *m);
+void thread_mutex_lock(struct thread_mutex *m);
+void thread_mutex_unlock(struct thread_mutex *m);
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..bec1683
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,126 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/sync.h"
+#include "user/user.h"
+
+struct queue {
+  int arr[16];
+  int front;
+  int rear;
+  int size;
+};
+
+void queue_init(struct queue *q) {
+  q->front = 0;
+  q->rear = 0;
+  q->size = 0;
+}
+void push(struct queue *q, int x) {
+  q->arr[q->rear] = x;
+  q->rear = (q->rear + 1) % 16;
+  q->size++;
+}
+int front(struct queue *q) {
+  if (q->size == 0)
+    return -1;
+  return q->arr[q->front];
+}
+void pop(struct queue *q) {
+  q->front = (q->front + 1) % 16;
+  q->size--;
+}
+
+struct queue q;
+// a mutex object lock
+struct thread_mutex lock;
+// a semaphore object empty
+struct thread_sem empty;
+// a semaphore object full
+struct thread_sem full;
+// to lock console
+struct thread_mutex plock;
+
+void init_semaphore() {
+  // initialize mutex lock
+  thread_mutex_init(&lock);
+  thread_mutex_init(&plock);
+  // initialize semaphore empty with 5
+  thread_sem_init(&empty, 5);
+  // initialize semaphore full with 0
+  thread_sem_init(&full, 0);
+}
+
+void ProducerFunc(void *arg) {
+  thread_mutex_lock(&plock);
+  printf("%s\n", (char *)arg);
+  thread_mutex_unlock(&plock);
+  int i;
+  for (i = 1; i <= 10; i++) {
+    // wait for semphore empty
+    thread_sem_wait(&empty);
+    // wait for mutex lock
+    thread_mutex_lock(&lock);
+
+    sleep(1);
+    push(&q, i);
+    thread_mutex_lock(&plock);
+    printf("producer produced item %d\n", i);
+    thread_mutex_unlock(&plock);
+
+    // unlock mutex lock
+    thread_mutex_unlock(&lock);
+    // post semaphore full
+    thread_sem_post(&full);
+  }
+  thread_exit();
+}
+
+void ConsumerFunc(void *arg) {
+  thread_mutex_lock(&plock);
+  printf("%s\n", (char *)arg);
+  thread_mutex_unlock(&plock);
+  int i;
+  for (i = 1; i <= 10; i++) {
+    // wait for semphore full
+    thread_sem_wait(&full);
+    // wait for mutex lock
+    thread_mutex_lock(&lock);
+
+    sleep(1);
+    int item = front(&q);
+    pop(&q);
+
+    thread_mutex_lock(&plock);
+    printf("consumer consumed item %d\n", item);
+    thread_mutex_unlock(&plock);
+
+    // unlock mutex lock
+    thread_mutex_unlock(&lock);
+    // post semaphore empty
+    thread_sem_post(&empty);
+  }
+  thread_exit();
+}
+
+int main(void) {
+
+  queue_init(&q);
+  init_semaphore();
+
+  char *message1 = "i am producer";
+  char *message2 = "i am consumer";
+
+  void *s1, *s2;
+  int thread1, thread2;
+
+  s1 = malloc(4096);
+  s2 = malloc(4096);
+
+  thread1 = thread_create(ProducerFunc, (void *)message1, s1);
+  thread2 = thread_create(ConsumerFunc, (void *)message2, s2);
+
+  thread_join(thread1);
+  thread_join(thread2);
+
+  exit(0);
+}
diff --git a/user/semaphore.c b/user/semaphore.c
new file mode 100644
index 0000000..d6176a9
--- /dev/null
+++ b/user/semaphore.c
@@ -0,0 +1,87 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "user/mutex.h"
+#include "user/condvar.h"
+#include "user/semaphore.h"
+
+
+void 
+thread_sem_init(struct thread_sem *sem, unsigned int c)
+{
+	sem->count = c;
+	sem->n = 0;
+}
+
+void 
+thread_sem_wait(struct thread_sem *sem)
+{
+	for(;;) {
+		int c;
+		int spin = MAXSPIN;
+		// wait while count is 0
+		while(__sync_bool_compare_and_swap(&sem->count, 0, 0)){
+			if (spin > 0) {
+				spin--;
+			} else {
+				__sync_fetch_and_add(&sem->n, 1);
+				fwait(&sem->count, 0);
+				__sync_fetch_and_add(&sem->n, -1);
+			}
+		}
+
+		// atomically load count
+		c = __sync_fetch_and_add(&sem->count, 0);
+
+		if (c && __sync_bool_compare_and_swap(&sem->count, c, c - 1)) {
+			// successfully decremented count
+		  __sync_synchronize();
+			break;
+		}
+	}
+}
+
+void 
+thread_sem_post(struct thread_sem *sem)
+{
+	__sync_synchronize();
+	__sync_fetch_and_add(&sem->count, 1);
+	// is there actually someone waiting on the semaphore
+	if (!__sync_bool_compare_and_swap(&sem->n, 0, 0)) {
+		// wakeup everyone, only one thread will decrement count
+		fwake(&sem->count, 1024 /* more than NPROC */); 
+	}
+}
+
+
+
+
+void 
+thread_sem_cv_init(struct thread_sem_cv *sem, unsigned int count)
+{
+	thread_mutex_init(&sem->mtx);
+	thread_cond_init(&sem->cv);
+	sem->count = count;
+}
+
+void 
+thread_sem_cv_wait(struct thread_sem_cv *sem) 
+{
+	thread_mutex_lock(&sem->mtx);
+  while (sem->count == 0) {
+      thread_cond_wait(&sem->cv, &sem->mtx); /*unlock mutex, wait, relock mutex */
+  }
+  sem->count--;
+  thread_mutex_unlock(&sem->mtx);
+}
+
+void 
+thread_sem_cv_post(struct thread_sem_cv *sem) 
+{
+	thread_mutex_lock(&sem->mtx);
+	sem->count++;
+	if(sem->count == 1) {
+		thread_cond_signal(&sem->cv); /* See note */
+	}
+	/* A woken thread must acquire the lock, so it will also have to wait until we call unlock */
+	thread_mutex_unlock(&sem->mtx);
+}
diff --git a/user/semaphore.h b/user/semaphore.h
new file mode 100644
index 0000000..26fcb4e
--- /dev/null
+++ b/user/semaphore.h
@@ -0,0 +1,19 @@
+
+struct thread_sem {
+  int count;
+  int n;
+};
+
+struct thread_sem_cv {
+  int count;
+  struct thread_condvar cv;
+  struct thread_mutex mtx;
+};
+
+void thread_sem_init(struct thread_sem *, unsigned int);
+void thread_sem_wait(struct thread_sem *);
+void thread_sem_post(struct thread_sem *);
+
+void thread_sem_cv_init(struct thread_sem_cv *, unsigned int);
+void thread_sem_cv_wait(struct thread_sem_cv *);
+void thread_sem_cv_post(struct thread_sem_cv *);
diff --git a/user/semcvtest.c b/user/semcvtest.c
new file mode 100644
index 0000000..32e30af
--- /dev/null
+++ b/user/semcvtest.c
@@ -0,0 +1,92 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "user/sync.h"
+
+
+struct thread_sem_cv p, q, r;
+int c;
+int t0;
+int n = 0;
+int pid;
+int alive = 1;
+
+void new_line() {
+	for (int i = 0; i < 3; i++) {
+		if (__sync_bool_compare_and_swap(&c, i, (i + 1) % 3)) {
+			if (i == 2) {
+        if(__sync_bool_compare_and_swap(&alive, 1, 1)) {
+  		    printf("\n");
+          n++;
+
+          if (n == 10000) {
+            int t = uptime();
+            printf("finished in %d\n", (t - t0));
+            __sync_fetch_and_and(&alive, 0);
+            kill(pid);
+          }
+        }
+			}
+			return;
+		}
+	}
+}
+
+void thread_p(void*) {
+  for(;;) {
+    thread_sem_cv_wait(&p);
+    thread_sem_cv_wait(&p);
+    if(__sync_bool_compare_and_swap(&alive, 1, 1)) {
+      printf("p");
+    }
+    new_line();
+    thread_sem_cv_post(&q);
+    thread_sem_cv_post(&r);
+    // sleep(1);
+  }
+}
+
+void thread_q(void*) {
+  for(;;) {
+    thread_sem_cv_wait(&q);
+    thread_sem_cv_wait(&q);
+    if(__sync_bool_compare_and_swap(&alive, 1, 1)) {
+      printf("q");
+    }
+    new_line();
+    thread_sem_cv_post(&r);
+    thread_sem_cv_post(&p);
+    // sleep(1);
+  }
+}
+
+void thread_r(void*) {
+  for(;;) {
+    thread_sem_cv_wait(&r);
+    thread_sem_cv_wait(&r);
+    if(__sync_bool_compare_and_swap(&alive, 1, 1)) {
+      printf("r");
+    }
+    new_line();
+    thread_sem_cv_post(&p);
+    thread_sem_cv_post(&q);
+    // sleep(1);
+  }
+}
+
+int main() {
+  t0 = uptime();
+  pid = getpid();
+  thread_sem_cv_init(&p, 2);
+  thread_sem_cv_init(&q, 2);
+  thread_sem_cv_init(&r, 2);
+  void *s1 = malloc(4096);
+  void *s2 = malloc(4096);
+  void *s3 = malloc(4096);
+  int th1 = thread_create(thread_p, 0, s1);
+  int th2 = thread_create(thread_q, 0, s2);
+  int th3 = thread_create(thread_r, 0, s3);
+  thread_join(th1);
+  thread_join(th2);
+  thread_join(th3);
+  return 0;
+}
\ No newline at end of file
diff --git a/user/semtest.c b/user/semtest.c
new file mode 100644
index 0000000..fbe04ca
--- /dev/null
+++ b/user/semtest.c
@@ -0,0 +1,92 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "user/sync.h"
+
+
+struct thread_sem p, q, r;
+int c;
+int t0;
+int n = 0;
+int pid;
+int alive = 1;
+
+void new_line() {
+	for (int i = 0; i < 3; i++) {
+		if (__sync_bool_compare_and_swap(&c, i, (i + 1) % 3)) {
+			if (i == 2) {
+        if(__sync_bool_compare_and_swap(&alive, 1, 1)) {
+  		    printf("\n");
+          n++;
+
+          if (n == 10000) {
+            int t = uptime();
+            printf("finished in %d\n", (t - t0));
+            __sync_fetch_and_and(&alive, 0);
+            kill(pid);
+          }
+        }
+			}
+			return;
+		}
+	}
+}
+
+void thread_p(void*) {
+  for(;;) {
+    thread_sem_wait(&p);
+    thread_sem_wait(&p);
+    if(__sync_bool_compare_and_swap(&alive, 1, 1)) {
+      printf("p");
+    }
+    new_line();
+    thread_sem_post(&q);
+    thread_sem_post(&r);
+    // sleep(1);
+  }
+}
+
+void thread_q(void*) {
+  for(;;) {
+    thread_sem_wait(&q);
+    thread_sem_wait(&q);
+    if(__sync_bool_compare_and_swap(&alive, 1, 1)) {
+      printf("q");
+    }
+    new_line();
+    thread_sem_post(&r);
+    thread_sem_post(&p);
+    // sleep(1);
+  }
+}
+
+void thread_r(void*) {
+  for(;;) {
+    thread_sem_wait(&r);
+    thread_sem_wait(&r);
+    if(__sync_bool_compare_and_swap(&alive, 1, 1)) {
+      printf("r");
+    }
+    new_line();
+    thread_sem_post(&p);
+    thread_sem_post(&q);
+    // sleep(1);
+  }
+}
+
+int main() {
+  t0 = uptime();
+  pid = getpid();
+  thread_sem_init(&p, 2);
+  thread_sem_init(&q, 2);
+  thread_sem_init(&r, 2);
+  void *s1 = malloc(4096);
+  void *s2 = malloc(4096);
+  void *s3 = malloc(4096);
+  int th1 = thread_create(thread_p, 0, s1);
+  int th2 = thread_create(thread_q, 0, s2);
+  int th3 = thread_create(thread_r, 0, s3);
+  thread_join(th1);
+  thread_join(th2);
+  thread_join(th3);
+  return 0;
+}
\ No newline at end of file
diff --git a/user/spinlock.c b/user/spinlock.c
new file mode 100644
index 0000000..3a3c668
--- /dev/null
+++ b/user/spinlock.c
@@ -0,0 +1,28 @@
+// Mutual exclusion spin locks.
+#include "kernel/types.h"
+#include "user/spinlock.h"
+
+void
+thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
+  __sync_synchronize();
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
+
+
diff --git a/user/spinlock.h b/user/spinlock.h
new file mode 100644
index 0000000..e01ed7e
--- /dev/null
+++ b/user/spinlock.h
@@ -0,0 +1,12 @@
+// Mutual exclusion lock.
+struct thread_spinlock {
+  volatile uint locked;       // Is the lock held?
+};
+
+
+
+void thread_spin_init(struct thread_spinlock *lk);
+void thread_spin_lock(struct thread_spinlock *lk);
+void thread_spin_unlock(struct thread_spinlock *lk);
+
+
diff --git a/user/spintest.c b/user/spintest.c
new file mode 100644
index 0000000..5ab6af7
--- /dev/null
+++ b/user/spintest.c
@@ -0,0 +1,150 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/sync.h"
+
+int N = 24;
+
+struct balance {
+  char name[32];
+  int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay(unsigned int d) {
+  unsigned int i;
+  for (i = 0; i < d; i++) {
+    __asm volatile("nop" :::);
+  }
+
+  return i;
+}
+
+volatile int _tid = 0;
+int *x[2];
+int n = 10000;
+
+struct thread_spinlock printlock;
+struct thread_spinlock smemlock;
+struct thread_spinlock mlock;
+struct thread_spinlock lock;
+struct thread_sem sem;
+
+int *smem;
+
+void do_work(void *arg) {
+  int i;
+  int old;
+  int tid;
+  tid = _tid++;
+
+  struct balance *b = (struct balance *)arg;
+  x[tid] = malloc(sizeof(int) * n);
+
+
+  for (int i = 0; i < n; i++) {
+    x[tid][i] = i;
+  }
+
+  for (i = 0; i < b->amount; i++) {
+    // lock and mlock will be implemented by you.
+    thread_spin_lock(&lock);
+    thread_spin_lock(&mlock);
+    old = total_balance;
+    delay(100000);
+    // if(old != total_balance)  printf("we will miss an update. old: %d
+    // total_balance: %d\n", old, total_balance);
+    total_balance = old + 1;
+    thread_spin_unlock(&lock);
+    thread_spin_unlock(&mlock);
+  }
+
+  for (int i = 0; i < n; i++) {
+    thread_spin_lock(&smemlock);
+    smem[i]++;
+    delay(100000);
+    thread_spin_unlock(&smemlock);
+  }
+
+  thread_sem_post(&sem);
+
+  thread_exit();
+  return;
+}
+
+void empty_task() {
+
+  for (int i = 0; i < n; i++) {
+    thread_spin_lock(&smemlock);
+    smem[i]++;
+    delay(100000);
+    thread_spin_unlock(&smemlock);
+  }
+
+  thread_sem_post(&sem);
+
+  int *x = (int*)malloc(sizeof(int)*n);
+  int i = 0;
+  while(1){
+    x[i]++;
+    i = (i + 1) % n;
+  }
+
+  thread_exit();
+  return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  void *s1, *s2, *s3;
+  int thread1, thread2, r1, r2;
+
+  thread_spin_init(&printlock);
+  thread_spin_init(&smemlock);
+  thread_spin_init(&mlock);
+  thread_spin_init(&lock);
+  thread_sem_init(&sem, 0);
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  smem = malloc(sizeof(int) * n);
+  memset(smem, 0, sizeof(int) * n);
+
+  thread2 = thread_create(do_work, (void *)&b2, s2);
+  thread1 = thread_create(do_work, (void *)&b1, s1);
+
+  for(int i = 0; i < (N - 2); i++) {
+    s3 = malloc(4096);
+    thread_create(empty_task, 0, s3);
+  }
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  for(int i = 0; i < N; i++){
+    thread_sem_wait(&sem);
+  }
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", thread1, r1,
+         thread2, r2, total_balance);
+  printf("Thread 1 malloced: %p\n", x[0]);
+  printf("Thread 2 malloced: %p\n", x[1]);
+  for (int i = 0; i < n; i++) {
+    if (x[0][i] != i || x[1][i] != i) {
+      printf("Doesn't match\n");
+      printf("%d vs %d for %d\n", x[0][i], x[0][i], i);
+      return 0;
+    }
+    if (smem[i] != N) {
+      printf("is't N\n");
+      return 0;
+    }
+  }
+  printf("Passed\n");
+  exit(0);
+}
diff --git a/user/sync.h b/user/sync.h
new file mode 100644
index 0000000..a1076d0
--- /dev/null
+++ b/user/sync.h
@@ -0,0 +1,5 @@
+#include "user/spinlock.h"
+#include "user/mutex.h"
+#include "user/condvar.h"
+#include "user/semaphore.h"
+
diff --git a/user/thread.c b/user/thread.c
new file mode 100644
index 0000000..1209d5f
--- /dev/null
+++ b/user/thread.c
@@ -0,0 +1,84 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/sync.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+struct thread_spinlock lock;
+struct thread_mutex mlock, plock;
+
+
+void do_work(void *arg){
+    int i; 
+    int old;
+   
+    struct balance *b = (struct balance*) arg; 
+    thread_mutex_lock(&plock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_mutex_unlock(&plock);
+
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+         thread_spin_lock(&lock);
+         thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+      	 if(old != total_balance)  {
+            thread_mutex_lock(&plock);
+            printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+            thread_mutex_unlock(&plock);
+         }
+         total_balance = old + 1;
+         thread_spin_unlock(&lock);
+         thread_mutex_unlock(&mlock);
+
+    }
+  
+    thread_mutex_lock(&plock);
+    printf( "Done s:%x\n", b->name);
+    thread_mutex_unlock(&plock);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+ 
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  thread_spin_init(&lock);
+  thread_mutex_init(&mlock);
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..f7851d3 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,3 +1,4 @@
+#define MAXSPIN 1000
 struct stat;
 
 // system calls
@@ -22,6 +23,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int  fwait(int*, int);
+void fwake(int*, int);
+int thread_create(void (*fcn)(void*), void*, void*);
+int thread_join(int);
+void thread_exit(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..28ba7c8 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_exit");
+entry("thread_join");
+entry("fwait");
+entry("fwake");
