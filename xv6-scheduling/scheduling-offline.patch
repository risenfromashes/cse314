diff --git a/Makefile b/Makefile
index 39a99d7..af95b21 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,9 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/random.o \
+  $K/pqueue.o
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -132,6 +134,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +157,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 8
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/compile_flags.txt b/compile_flags.txt
new file mode 100644
index 0000000..60a4aad
--- /dev/null
+++ b/compile_flags.txt
@@ -0,0 +1 @@
+-I.
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..b382d0f 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -96,6 +96,7 @@ struct cpu*     mycpu(void);
 struct cpu*     getmycpu(void);
 struct proc*    myproc();
 void            procinit(void);
+void            schedulerinit(void);
 void            scheduler(void) __attribute__((noreturn));
 void            sched(void);
 void            sleep(void*, struct spinlock*);
@@ -106,6 +107,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             settickets(int);
+int             getpinfo(uint64);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -185,5 +188,9 @@ void            virtio_disk_init(void);
 void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
+// random.c
+void            seed(uint64);
+uint64          random();
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..af5d67a 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -28,6 +28,7 @@ main()
     iinit();         // inode table
     fileinit();      // file table
     virtio_disk_init(); // emulated hard disk
+    schedulerinit();  // scheduler queues must be initialised before first user process
     userinit();      // first user process
     __sync_synchronize();
     started = 1;
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..2419f27 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -1,13 +1,18 @@
-#define NPROC        64  // maximum number of processes
-#define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
-#define NFILE       100  // open files per system
-#define NINODE       50  // maximum number of active i-nodes
-#define NDEV         10  // maximum major device number
-#define ROOTDEV       1  // device number of file system root disk
-#define MAXARG       32  // max exec arguments
-#define MAXOPBLOCKS  10  // max # of blocks any FS op writes
-#define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
-#define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       2000  // size of file system in blocks
-#define MAXPATH      128   // maximum file path name
+#define NPROC                64               // maximum number of processes
+#define NCPU                 8                // maximum number of CPUs
+#define NOFILE               16               // open files per process
+#define NFILE                100              // open files per system
+#define NINODE               50               // maximum number of active i-nodes
+#define NDEV                 10               // maximum major device number
+#define ROOTDEV              1                // device number of file system root disk
+#define MAXARG               32               // max exec arguments
+#define MAXOPBLOCKS          10               // max # of blocks any FS op writes
+#define LOGSIZE              (MAXOPBLOCKS*3)  // max data blocks in on-disk log
+#define NBUF                 (MAXOPBLOCKS*3)  // size of disk block cache
+#define FSSIZE               2000             // size of file system in blocks
+#define MAXPATH              128              // maximum file path name
+#define NQUEUE               2                // number of queues in MFLQ
+#define DEFAULT_TICKET_COUNT 10               // default ticket count for each process
+#define TIME_LIMIT_1         1                // queue 1 allocated time slice
+#define TIME_LIMIT_2         2                // queue 1 allocated time slice
+#define BOOST_INTERVAL       64               // interval between MLFQ boosting
diff --git a/kernel/pqueue.c b/kernel/pqueue.c
new file mode 100644
index 0000000..ea546e5
--- /dev/null
+++ b/kernel/pqueue.c
@@ -0,0 +1,192 @@
+#include "param.h"
+#include "types.h"
+#include "memlayout.h"
+#include "spinlock.h"
+#include "riscv.h"
+#include "proc.h"
+#include "pqueue.h"
+#include "defs.h"
+
+#include <stddef.h>
+
+#define INC(x) ((x + PQUEUE_CAPACITY + 1) % PQUEUE_CAPACITY)
+#define DEC(x) ((x + PQUEUE_CAPACITY - 1) % PQUEUE_CAPACITY)
+
+extern struct proc proc[NPROC];
+
+static int pqueue_round_robin_select(struct pqueue *q) {
+  for (int i = q->head; i != q->tail; i = INC(i)) {
+    struct proc* p = q->procs[i];
+    acquire(&p->lock);
+    if (p->state == RUNNABLE) {
+      /* select first runnable process */
+      release(&p->lock);
+      return i;
+    }
+    release(&p->lock);
+  }
+  return -1;
+}
+
+static int pqueue_lottery_select(struct pqueue *q) {
+  /* get total tickets */
+  uint64 total_tickets = 0;
+  for (int i = q->head; i != q->tail; i = INC(i)) {
+    struct proc* p = q->procs[i];
+    acquire(&p->lock);
+    /* only consider processes that are runnable */
+    if (p->state == RUNNABLE) {
+      total_tickets += p->tickets;
+    }
+    release(&p->lock);
+  }
+
+  if (total_tickets == 0) {
+    for (int i = q->head; i != q->tail; i = INC(i)) {
+      struct proc* p = q->procs[i];
+      acquire(&p->lock);
+      /* only consider processes that are runnable */
+      if (p->state == RUNNABLE) {
+        p->tickets = p->initial_tickets;
+      }
+      release(&p->lock);
+    }
+
+    return -1;
+  }
+
+  /* generate random number */
+  uint64 r = random() % total_tickets;
+
+  for (int i = q->head; i != q->tail; i = INC(i)) {
+    struct proc* p = q->procs[i];
+    acquire(&p->lock);
+    if (p->state == RUNNABLE) {
+      if(r < p->tickets) {
+        /* falls in range */
+        p->tickets--;
+        release(&p->lock);
+        return i;
+      } else {
+        r -= p->tickets;
+      }
+    }
+    release(&p->lock);
+  }
+  /* there is no runnable process in queue */
+  return -1;
+}
+
+int (*pqueue_selectors[])(struct pqueue* q) = {
+  [PQUEUE_ROUND_ROBIN] = pqueue_round_robin_select, 
+  [PQUEUE_LOTTERY] = pqueue_lottery_select
+};
+
+void pqueue_init(struct pqueue *q, enum pqueue_algorithm alg, int time_limit) {
+  initlock(&q->lock, "pqueue lock");
+  q->head = q->tail = 0;
+  q->strategy = alg;
+  q->time_limit = time_limit;
+}
+
+void pqueue_push(struct pqueue* q, struct proc *p){
+  acquire(&q->lock);
+  if (q->head == INC(q->tail)) {
+    panic("Attemping to push into full queue");
+  }
+
+
+  q->procs[q->tail] = p;
+  q->tail = INC(q->tail);
+  release(&q->lock);
+
+  if(!holding(&p->lock)) {
+    panic("Lock not held on p while attempting to push to queue");
+  }
+
+  p->queue = q;
+}
+
+struct proc* pqueue_pop(struct pqueue *q) {
+  acquire(&q->lock);
+
+  if (q->head == q->tail) {
+    /* empty queue */
+    release(&q->lock);
+    return NULL;
+  }
+
+  int t = pqueue_selectors[q->strategy](q);
+
+
+  if(t == -1) {
+    /* no suitable candidate to pop */
+    /* very rare case? should happen when all processes sleep for some reason */
+    release(&q->lock);
+    return NULL;
+  }
+
+  /* swap head with popped proc */
+  struct proc* ret = q->procs[t];
+  q->procs[t] = q->procs[q->head];
+  q->head = INC(q->head);
+  release(&q->lock);
+
+  /* popped from queue */
+  acquire(&ret->lock);
+  ret->queue = NULL;
+  release(&ret->lock);
+
+  return ret;
+}
+
+
+int pqueue_empty(struct pqueue* q) {
+  acquire(&q->lock);
+  int ret = q->head == q->tail;
+  acquire(&q->lock);
+  return ret;
+}
+
+
+void pqueue_boost(struct pqueue* q) {
+  for (struct proc *p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+
+    /* running process must not be in any queue */
+    if (p->state == RUNNING && p->queue) {
+      panic("Running process found in queue");
+    }
+
+    /* running processes aren't boosted */
+    /* and of course zombie processes aren't boosted :clown */
+    if (p->state == UNUSED || p->state == RUNNING || p->state == ZOMBIE) {
+      release(&p->lock);
+      continue;
+    }
+
+    if (!p->queue) {
+      panic("null pqueue for used process");
+    }
+
+
+    /* steal from other queue */
+    struct pqueue* q2 = p->queue;
+    release(&p->lock);
+
+    if (q == q2) {
+      continue;
+    }
+
+    /* modifying q2, so lock must be held */
+    acquire(&q2->lock);
+    for (int i = q2->head; i != q2->tail; i = INC(i)) {
+      acquire(&q2->procs[i]->lock);
+      pqueue_push(q, q2->procs[i]);
+      release(&q2->procs[i]->lock);
+    }
+    /* clear q2 */
+    q2->head = q2->tail = 0;
+    release(&q2->lock);
+  }
+}
diff --git a/kernel/pqueue.h b/kernel/pqueue.h
new file mode 100644
index 0000000..ed72622
--- /dev/null
+++ b/kernel/pqueue.h
@@ -0,0 +1,43 @@
+#ifndef __PROC_QUEUE_H__
+#define __PROC_QUEUE_H__
+
+
+#define PQUEUE_CAPACITY (NPROC + 1)
+
+enum pqueue_algorithm {
+  PQUEUE_ROUND_ROBIN = 0,
+  PQUEUE_LOTTERY = 1,
+};
+
+struct pqueue {
+  /* lock needs to be held for all queue operations */
+  struct spinlock lock;
+  /* the processes currently in the queue */
+  struct proc* procs[PQUEUE_CAPACITY];
+  /* circular queue of length (tail - head) */
+  /* tail indicates end of queue */
+  int head;
+  int tail;
+  /* strategy used to pop element from queue */
+  enum pqueue_algorithm strategy;
+  /* time limit for processes scheduled from this queue */
+  int time_limit;
+};
+
+/* initialize the queue */
+void pqueue_init(struct pqueue* q, enum pqueue_algorithm strategy, int time_limit);
+
+/* push proc into the queue, proc lock must be held */
+void pqueue_push(struct pqueue* q, struct proc *proc);
+
+/* pop runnable process according to scheduling algorithm */
+struct proc* pqueue_pop(struct pqueue* q);
+
+/* checks whether queue is empty */
+int pqueue_empty(struct pqueue* q);
+
+
+/* boost all procs to target queue */
+void pqueue_boost(struct pqueue* q);
+
+#endif
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..b13715d 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,11 +5,27 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pqueue.h"
+#include "pstat.h"
+
+#include <stddef.h>
 
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
 
+struct pqueue pqueues[NQUEUE];
+
+enum pqueue_algorithm pqueue_algorithms[NQUEUE] = {
+  PQUEUE_LOTTERY, 
+  PQUEUE_ROUND_ROBIN
+};
+
+int pqueue_time_limits[NQUEUE] = {
+  TIME_LIMIT_1, 
+  TIME_LIMIT_2
+};
+
 struct proc *initproc;
 
 int nextpid = 1;
@@ -146,6 +162,11 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  p->tickets = p->initial_tickets = DEFAULT_TICKET_COUNT;
+  p->time_slices = 0;
+
+  pqueue_push(&pqueues[0], p);
+
   return p;
 }
 
@@ -169,6 +190,8 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->queue = NULL;
+  p->time_slices = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -296,6 +319,10 @@ fork(void)
   }
   np->sz = p->sz;
 
+  /* inherit tickets from parent process */
+  np->initial_tickets = p->initial_tickets;
+  np->tickets = p->tickets;
+
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
@@ -434,6 +461,16 @@ wait(uint64 addr)
   }
 }
 
+volatile int scheduler_started = 0;
+
+/* scheduler initialised */
+void schedulerinit(void) {
+  /* initialize queues */   
+  for(int i = 0; i < NQUEUE; i++) {
+    pqueue_init(&pqueues[i], pqueue_algorithms[i], pqueue_time_limits[i]);
+  }
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -444,28 +481,65 @@ wait(uint64 addr)
 void
 scheduler(void)
 {
-  struct proc *p;
   struct cpu *c = mycpu();
-  
-  c->proc = 0;
+  c->proc = NULL;
+
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
+    int time_limit = 0;
+    struct pqueue *next_queue = NULL;
+    struct pqueue *prev_queue = NULL;
+    struct proc *p = NULL;
+
+    for(int i = 0; i < NQUEUE; i++) {
+      /* try to schedule from the top queue first */
+      struct pqueue *q = &pqueues[i];
+      if ((p = pqueue_pop(q))) {
+        time_limit = q->time_limit;
+        /* by default use current queue for if there is no prev or next queue */
+        prev_queue = next_queue = q;
+        if (i != 0) {
+          prev_queue = q - 1;
+        }
+        if (i != (NQUEUE - 1)) {
+          next_queue = q + 1;
+        }
+        break;
+      }
+    }
+
+    if (p) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
+
+      /* remember initial time slices */
+      uint64 t0 = p->time_slices;
+
+      while (p->state == RUNNABLE && ((p->time_slices - t0) < time_limit)) {
+        /* yield to chosen process */
+        p->state = RUNNING;
+        c->proc = p;
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
         swtch(&c->context, &p->context);
+        p->time_slices++;
+      }
 
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      c->proc = NULL;
+      if (p->state == RUNNABLE) {
+        /* still runnable, must have finished time slot */
+        /* insert to next lower level queue */
+        pqueue_push(next_queue, p);
+      } else if (p->state == SLEEPING) {
+        /* voluntarily relinquished cpu */
+        /* insert to prev higher level queue */
+        pqueue_push(prev_queue, p);
       }
+
       release(&p->lock);
     }
   }
@@ -681,3 +755,41 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+
+int
+settickets(int tickets) {
+  struct proc *p = myproc();
+  /* process is running so no need to lock */
+  p->initial_tickets = p->tickets = tickets;
+  return 0;
+}
+
+int
+getpinfo(uint64 addr) {
+  struct pstat stat;
+
+  for(int i = 0; i < NPROC; i++) {
+    struct proc *p = &proc[i];
+    acquire(&p->lock);
+    stat.pid[i] = p->pid;
+    stat.inuse[i] = p->state == RUNNING || p->state == RUNNABLE;
+    if (p->queue) {
+      stat.inQ[i] = p->queue - &pqueues[0] + 1;
+    } else {
+      stat.inQ[i] = 0;
+    }
+    stat.tickets_current[i] = p->tickets;
+    stat.tickets_original[i] = p->initial_tickets;
+    stat.time_slices[i] = p->time_slices;
+    release(&p->lock);
+  }
+
+  struct proc *p = myproc();
+
+  if(copyout(p->pagetable, addr, (char *)&stat, sizeof(struct pstat)) != 0) {
+    return -1;
+  }
+  return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..53e0c1d 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -81,6 +81,8 @@ struct trapframe {
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+struct pqueue;
+
 // Per-process state
 struct proc {
   struct spinlock lock;
@@ -92,6 +94,9 @@ struct proc {
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
 
+  struct pqueue *queue;        // index of the queue in use
+  int time_slices;             // number of time slices used since scheduling
+
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
@@ -104,4 +109,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  uint64 initial_tickets;      // tickets to be allocated to this process
+  uint64 tickets;              // tickets currently left
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..f13660c
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,16 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+
+struct pstat {
+  int pid[NPROC]; // the process ID of each process 
+  int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+  int inQ[NPROC]; // which queue the process is currently in 
+  int tickets_original[NPROC]; // the number of tickets each process originally had
+  int tickets_current[NPROC]; // the number of tickets each process currently has
+  int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+
+#endif // _PSTAT_H_
+
diff --git a/kernel/random.c b/kernel/random.c
new file mode 100644
index 0000000..57977f3
--- /dev/null
+++ b/kernel/random.c
@@ -0,0 +1,12 @@
+#include "kernel/types.h"
+
+uint64 _seed = 7;
+const uint64 A = 1103515245;
+const uint64 C = 12345;
+
+void seed(uint64 seed) { _seed = seed; }
+
+uint64 random() {
+  _seed = (A * _seed + C) & ((1u << 31) - 1);
+  return _seed;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ee8ec2a 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,31 +101,35 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+[SYS_fork]       = sys_fork,
+[SYS_exit]       = sys_exit,
+[SYS_wait]       = sys_wait,
+[SYS_pipe]       = sys_pipe,
+[SYS_read]       = sys_read,
+[SYS_kill]       = sys_kill,
+[SYS_exec]       = sys_exec,
+[SYS_fstat]      = sys_fstat,
+[SYS_chdir]      = sys_chdir,
+[SYS_dup]        = sys_dup,
+[SYS_getpid]     = sys_getpid,
+[SYS_sbrk]       = sys_sbrk,
+[SYS_sleep]      = sys_sleep,
+[SYS_uptime]     = sys_uptime,
+[SYS_open]       = sys_open,
+[SYS_write]      = sys_write,
+[SYS_mknod]      = sys_mknod,
+[SYS_unlink]     = sys_unlink,
+[SYS_link]       = sys_link,
+[SYS_mkdir]      = sys_mkdir,
+[SYS_close]      = sys_close,
+[SYS_settickets] = sys_settickets,
+[SYS_getpinfo]   = sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..44fa9b5 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,22 +1,24 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_fork        1
+#define SYS_exit        2
+#define SYS_wait        3
+#define SYS_pipe        4
+#define SYS_read        5
+#define SYS_kill        6
+#define SYS_exec        7
+#define SYS_fstat       8
+#define SYS_chdir       9
+#define SYS_dup        10
+#define SYS_getpid     11
+#define SYS_sbrk       12
+#define SYS_sleep      13
+#define SYS_uptime     14
+#define SYS_open       15
+#define SYS_write      16
+#define SYS_mknod      17
+#define SYS_unlink     18
+#define SYS_link       19
+#define SYS_mkdir      20
+#define SYS_close      21
+#define SYS_settickets 22
+#define SYS_getpinfo   23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..cb3b7e2 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,18 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void) {
+  int tickets;
+  argint(0, &tickets);
+  return settickets(tickets);
+}
+
+
+uint64
+sys_getpinfo(void) {
+  uint64 addr;
+  argaddr(0, &addr);
+  return getpinfo(addr);
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..96a2cbe 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -5,12 +5,16 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pqueue.h"
 
 struct spinlock tickslock;
 uint ticks;
 
 extern char trampoline[], uservec[], userret[];
 
+extern struct proc proc[NPROC];
+extern struct pqueue pqueues[NQUEUE];
+
 // in kernelvec.S, calls kerneltrap().
 void kernelvec();
 
@@ -167,6 +171,14 @@ clockintr()
   ticks++;
   wakeup(&ticks);
   release(&tickslock);
+
+  /* time slices mod 64 */
+  static int t = 0;
+  /* boost all runnable processes after 64 time slices */
+  if (++t == 64) {
+    t = 0;    
+    pqueue_boost(&pqueues[0]);
+  }
 }
 
 // check if it's an external interrupt or software interrupt,
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..8843ffd
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,37 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char **argv) {
+  if (argc <= 1) {
+    printf("Usage:\n");
+    printf("settickets <ticket count>\n");
+    return 1;
+  }
+
+  int tickets = atoi(argv[1]);
+  if (settickets(tickets) != 0) {
+    printf("setticket failed\n");
+    return 1;
+  }
+
+  /* dummy calculation */
+  int dummy[10];
+  int itr = 2e8;
+  int nfork = 5;
+
+  for (int i = 0, k = 0; i < itr; i++) {
+    if (i >= (k * itr / nfork)) {
+      /* distribute forks evenly */
+      fork();
+      k++;
+    }
+    dummy[i % 10] = (dummy[i % 10] + i) % 10;
+  }
+
+  if (dummy[0]) {
+    printf("");
+  }
+
+  return 0;
+}
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..35c1df9
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,31 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+
+
+int main(int argc, char **argv) {
+	struct pstat stat;
+
+	if (getpinfo(&stat) < 0) {
+		printf("%s: exec failed\n", argv[0]);
+		return 1;
+	}
+		
+	printf("PID\t|\tIn Use\t|\tinQ\t|\tOriginal Tickets\t|\tCurrent Tickets\t|\tTime Slices\n");
+
+  for (int i = 0; i < NPROC; i++) {
+    if (stat.pid[i] == 0) {
+			continue;
+		}
+    printf("%d\t\t%d\t\t%d\t\t%d\t\t\t\t%d\t\t\t%d\n", 
+			stat.pid[i], 
+			stat.inuse[i], 
+			stat.inQ[i], 
+			stat.tickets_original[i], 
+			stat.tickets_current[i], 
+			stat.time_slices[i]);
+  }
+
+	return 0;
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..b5ef267 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat *);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
